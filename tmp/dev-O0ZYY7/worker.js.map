{
  "version": 3,
  "sources": ["../bundle-tIS6h9/checked-fetch.js", "../bundle-tIS6h9/strip-cf-connecting-ip-header.js", "../../../node_modules/src/src/Router.ts", "../../../node_modules/src/src/StatusError.ts", "../../../node_modules/src/src/createResponse.ts", "../../../node_modules/src/src/json.ts", "../../../node_modules/src/src/error.ts", "../../../node_modules/src/src/status.ts", "../../../node_modules/src/src/text.ts", "../../../node_modules/src/src/html.ts", "../../../node_modules/src/src/jpeg.ts", "../../../node_modules/src/src/png.ts", "../../../node_modules/src/src/webp.ts", "../../../node_modules/src/src/withContent.ts", "../../../node_modules/src/src/withCookies.ts", "../../../node_modules/src/src/withParams.ts", "../../../node_modules/src/src/createCors.ts", "../../../src/config.js", "../../../src/utils/supabase.js", "../../../src/utils/security.js", "../../../src/utils/metadata.js", "../../../src/handlers/github.js", "../../../src/handlers/linear.js", "../../../src/handlers/slack.js", "../../../src/worker.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-tIS6h9/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-tIS6h9/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\L\\Desktop\\Event\\.wrangler\\tmp\\dev-O0ZYY7",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "// src/config.js\r\nexport function getConfig(env) {\r\n  return {\r\n    // Supabase configuration\r\n    supabaseUrl: env.SUPABASE_URL,\r\n    supabaseKey: env.SUPABASE_SERVICE_KEY,\r\n    \r\n    // Webhook secrets\r\n    githubWebhookSecret: env.GITHUB_WEBHOOK_SECRET,\r\n    linearWebhookSecret: env.LINEAR_WEBHOOK_SECRET,\r\n    slackSigningSecret: env.SLACK_SIGNING_SECRET,\r\n    \r\n    // Feature flags\r\n    debug: env.DEBUG === 'true',\r\n    enableBatching: env.ENABLE_BATCHING !== 'false', // Default to true\r\n    enableMetrics: env.ENABLE_METRICS !== 'false', // Default to true\r\n    enableRetry: env.ENABLE_RETRY !== 'false', // Default to true\r\n    \r\n    // Performance settings\r\n    batchSize: parseInt(env.BATCH_SIZE || '50'),\r\n    batchInterval: parseInt(env.BATCH_INTERVAL || '5000'), // 5 seconds\r\n    maxRetries: parseInt(env.MAX_RETRIES || '3'),\r\n    retryDelay: parseInt(env.RETRY_DELAY || '500'), // 500ms\r\n    \r\n    // Rate limiting\r\n    rateLimitWindow: parseInt(env.RATE_LIMIT_WINDOW || '60000'), // 1 minute\r\n    rateLimitMaxRequests: parseInt(env.RATE_LIMIT_MAX_REQUESTS || '100'),\r\n    \r\n    // Data retention\r\n    dataRetentionDays: parseInt(env.DATA_RETENTION_DAYS || '90'),\r\n    \r\n    // Worker identification\r\n    workerId: env.WORKER_ID || 'webhook-gateway',\r\n    workerEnvironment: env.WORKER_ENVIRONMENT || 'production'\r\n  };\r\n}\r\n\r\n// Environment variable validation\r\nexport function validateConfig(config) {\r\n  const required = [\r\n    'supabaseUrl',\r\n    'supabaseKey'\r\n  ];\r\n  \r\n  const missing = required.filter(key => !config[key]);\r\n  \r\n  if (missing.length > 0) {\r\n    throw new Error(`Missing required configuration: ${missing.join(', ')}`);\r\n  }\r\n  \r\n  // Validate URLs\r\n  try {\r\n    new URL(config.supabaseUrl);\r\n  } catch (error) {\r\n    throw new Error('Invalid SUPABASE_URL format');\r\n  }\r\n  \r\n  // Validate numeric values\r\n  const numericFields = [\r\n    'batchSize',\r\n    'batchInterval',\r\n    'maxRetries',\r\n    'retryDelay',\r\n    'rateLimitWindow',\r\n    'rateLimitMaxRequests',\r\n    'dataRetentionDays'\r\n  ];\r\n  \r\n  for (const field of numericFields) {\r\n    if (isNaN(config[field]) || config[field] < 0) {\r\n      throw new Error(`Invalid ${field} value: ${config[field]}`);\r\n    }\r\n  }\r\n  \r\n  return true;\r\n}", "// src/utils/supabase.js\r\nlet supabaseClient = null;\r\nconst MAX_RETRIES = 3;\r\nconst RETRY_DELAY_MS = 500;\r\nconst BATCH_SIZE = 100;\r\nconst DEDUPLICATION_WINDOW_MS = 5000; // 5 seconds\r\n\r\n// In-memory cache for deduplication\r\nconst eventCache = new Map();\r\nconst CACHE_CLEANUP_INTERVAL = 60000; // 1 minute\r\n\r\n/**\r\n * Initialize the Supabase client with enhanced error handling\r\n */\r\nexport function initSupabase(config) {\r\n  if (!config.supabaseUrl || !config.supabaseKey) {\r\n    throw new Error('Missing Supabase configuration');\r\n  }\r\n  \r\n  const customFetch = async (...args) => {\r\n    try {\r\n      return await fetch(...args);\r\n    } catch (error) {\r\n      console.error(`Network error during Supabase operation: ${error.message}`);\r\n      throw new Error(`Supabase network error: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n  supabaseClient = {\r\n    url: config.supabaseUrl,\r\n    key: config.supabaseKey,\r\n    fetch: customFetch,\r\n    \r\n    from: (table) => ({\r\n      insert: async (data, options = {}) => {\r\n        // Validate data before insertion\r\n        if (!data || (Array.isArray(data) && data.length === 0)) {\r\n          throw new Error('Cannot insert empty data');\r\n        }\r\n        \r\n        return await retryOperation(async () => {\r\n          const response = await customFetch(`${config.supabaseUrl}/rest/v1/${table}`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${config.supabaseKey}`,\r\n              'apikey': config.supabaseKey,\r\n              'Prefer': options.returning ? 'return=representation' : 'return=minimal'\r\n            },\r\n            body: JSON.stringify(data)\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            const errorText = await response.text();\r\n            throw new Error(`Supabase error (${response.status}): ${errorText}`);\r\n          }\r\n          \r\n          return options.returning ? await response.json() : { status: response.status };\r\n        });\r\n      },\r\n      \r\n      select: async (columns = '*', options = {}) => {\r\n        return await retryOperation(async () => {\r\n          let url = `${config.supabaseUrl}/rest/v1/${table}?select=${columns}`;\r\n          \r\n          if (options.filters) {\r\n            for (const [key, value] of Object.entries(options.filters)) {\r\n              url += `&${key}=${encodeURIComponent(value)}`;\r\n            }\r\n          }\r\n          \r\n          // Add pagination support\r\n          if (options.limit) {\r\n            url += `&limit=${options.limit}`;\r\n          }\r\n          \r\n          if (options.offset) {\r\n            url += `&offset=${options.offset}`;\r\n          }\r\n          \r\n          // Add ordering\r\n          if (options.orderBy) {\r\n            url += `&order=${options.orderBy}`;\r\n          }\r\n          \r\n          const response = await customFetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Authorization': `Bearer ${config.supabaseKey}`,\r\n              'apikey': config.supabaseKey\r\n            }\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            const errorText = await response.text();\r\n            throw new Error(`Supabase error (${response.status}): ${errorText}`);\r\n          }\r\n          \r\n          return await response.json();\r\n        });\r\n      },\r\n      \r\n      update: async (data, options = {}) => {\r\n        if (!data || Object.keys(data).length === 0) {\r\n          throw new Error('Cannot update with empty data');\r\n        }\r\n        \r\n        return await retryOperation(async () => {\r\n          let url = `${config.supabaseUrl}/rest/v1/${table}`;\r\n          if (options.match) {\r\n            url += '?';\r\n            for (const [key, value] of Object.entries(options.match)) {\r\n              url += `${key}=eq.${encodeURIComponent(value)}&`;\r\n            }\r\n            url = url.slice(0, -1);\r\n          }\r\n          \r\n          const response = await customFetch(url, {\r\n            method: 'PATCH',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${config.supabaseKey}`,\r\n              'apikey': config.supabaseKey,\r\n              'Prefer': options.returning ? 'return=representation' : 'return=minimal'\r\n            },\r\n            body: JSON.stringify(data)\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            const errorText = await response.text();\r\n            throw new Error(`Supabase error (${response.status}): ${errorText}`);\r\n          }\r\n          \r\n          return options.returning ? await response.json() : { status: response.status };\r\n        });\r\n      },\r\n      \r\n      delete: async (options = {}) => {\r\n        if (!options.match || Object.keys(options.match).length === 0) {\r\n          throw new Error('Delete operation requires match criteria');\r\n        }\r\n        \r\n        return await retryOperation(async () => {\r\n          let url = `${config.supabaseUrl}/rest/v1/${table}?`;\r\n          for (const [key, value] of Object.entries(options.match)) {\r\n            url += `${key}=eq.${encodeURIComponent(value)}&`;\r\n          }\r\n          url = url.slice(0, -1);\r\n          \r\n          const response = await customFetch(url, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Authorization': `Bearer ${config.supabaseKey}`,\r\n              'apikey': config.supabaseKey,\r\n              'Prefer': options.returning ? 'return=representation' : 'return=minimal'\r\n            }\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            const errorText = await response.text();\r\n            throw new Error(`Supabase error (${response.status}): ${errorText}`);\r\n          }\r\n          \r\n          return options.returning ? await response.json() : { status: response.status };\r\n        });\r\n      },\r\n      \r\n      count: async (options = {}) => {\r\n        return await retryOperation(async () => {\r\n          let url = `${config.supabaseUrl}/rest/v1/${table}?select=count`;\r\n          \r\n          if (options.filters) {\r\n            for (const [key, value] of Object.entries(options.filters)) {\r\n              url += `&${key}=${encodeURIComponent(value)}`;\r\n            }\r\n          }\r\n          \r\n          const response = await customFetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Authorization': `Bearer ${config.supabaseKey}`,\r\n              'apikey': config.supabaseKey,\r\n              'Prefer': 'count=exact'\r\n            }\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            const errorText = await response.text();\r\n            throw new Error(`Supabase error (${response.status}): ${errorText}`);\r\n          }\r\n          \r\n          const result = await response.json();\r\n          return parseInt(response.headers.get('content-range')?.split('/')[1] || '0');\r\n        });\r\n      },\r\n      \r\n      upsert: async (data, options = {}) => {\r\n        if (!data || (Array.isArray(data) && data.length === 0)) {\r\n          throw new Error('Cannot upsert empty data');\r\n        }\r\n        \r\n        return await retryOperation(async () => {\r\n          let url = `${config.supabaseUrl}/rest/v1/${table}`;\r\n          \r\n          // Add upsert parameters\r\n          url += '?on_conflict=' + (options.onConflict || 'id');\r\n          \r\n          const response = await customFetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${config.supabaseKey}`,\r\n              'apikey': config.supabaseKey,\r\n              'Prefer': `resolution=merge-duplicates${options.returning ? ',return=representation' : ''}`\r\n            },\r\n            body: JSON.stringify(data)\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            const errorText = await response.text();\r\n            throw new Error(`Supabase error (${response.status}): ${errorText}`);\r\n          }\r\n          \r\n          return options.returning ? await response.json() : { status: response.status };\r\n        });\r\n      }\r\n    }),\r\n    \r\n    rpc: async (functionName, params = {}) => {\r\n      return await retryOperation(async () => {\r\n        const response = await customFetch(`${config.supabaseUrl}/rest/v1/rpc/${functionName}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${config.supabaseKey}`,\r\n            'apikey': config.supabaseKey\r\n          },\r\n          body: JSON.stringify(params)\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          throw new Error(`Supabase RPC error (${response.status}): ${errorText}`);\r\n        }\r\n        \r\n        return await response.json();\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Start cache cleanup interval\r\n  startCacheCleanup();\r\n  \r\n  return supabaseClient;\r\n}\r\n\r\n/**\r\n * Retry an operation with exponential backoff\r\n */\r\nasync function retryOperation(operation, maxRetries = MAX_RETRIES) {\r\n  let lastError;\r\n  \r\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\r\n    try {\r\n      return await operation();\r\n    } catch (error) {\r\n      lastError = error;\r\n      console.warn(`Operation failed (attempt ${attempt + 1}/${maxRetries}): ${error.message}`);\r\n      \r\n      // Don't retry for client errors (4xx)\r\n      if (error.message.includes('error (4')) {\r\n        break;\r\n      }\r\n      \r\n      // Exponential backoff\r\n      const delay = RETRY_DELAY_MS * Math.pow(2, attempt);\r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n  }\r\n  \r\n  throw lastError;\r\n}\r\n\r\n/**\r\n * Get or create the Supabase client\r\n */\r\nexport function getSupabaseClient(config) {\r\n  if (!supabaseClient && config) {\r\n    return initSupabase(config);\r\n  }\r\n  \r\n  if (!supabaseClient) {\r\n    throw new Error('Supabase client not initialized. Call initSupabase first.');\r\n  }\r\n  \r\n  return supabaseClient;\r\n}\r\n\r\n/**\r\n * Generate event fingerprint for deduplication\r\n */\r\nfunction generateEventFingerprint(eventData) {\r\n  const key = `${eventData.source}_${eventData.event_type}_${eventData.repository || ''}_${eventData.actor || ''}_${eventData.payload?.id || ''}`;\r\n  return key;\r\n}\r\n\r\n/**\r\n * Check if event is duplicate\r\n */\r\nfunction isDuplicateEvent(eventData) {\r\n  const fingerprint = generateEventFingerprint(eventData);\r\n  const cachedTime = eventCache.get(fingerprint);\r\n  \r\n  if (cachedTime && (Date.now() - cachedTime) < DEDUPLICATION_WINDOW_MS) {\r\n    return true;\r\n  }\r\n  \r\n  eventCache.set(fingerprint, Date.now());\r\n  return false;\r\n}\r\n\r\n/**\r\n * Clean up old entries from event cache\r\n */\r\nfunction startCacheCleanup() {\r\n  setInterval(() => {\r\n    const now = Date.now();\r\n    for (const [key, timestamp] of eventCache.entries()) {\r\n      if (now - timestamp > DEDUPLICATION_WINDOW_MS) {\r\n        eventCache.delete(key);\r\n      }\r\n    }\r\n  }, CACHE_CLEANUP_INTERVAL);\r\n}\r\n\r\n/**\r\n * Store an event in Supabase with enhanced features\r\n */\r\nexport async function storeEvent(eventData, config) {\r\n  try {\r\n    // Validate required fields\r\n    if (!eventData.source) throw new Error('Event source is required');\r\n    if (!eventData.event_type) throw new Error('Event type is required');\r\n    if (!eventData.payload) throw new Error('Event payload is required');\r\n    \r\n    // Add timestamp if not provided\r\n    if (!eventData.created_at) {\r\n      eventData.created_at = new Date().toISOString();\r\n    }\r\n    \r\n    // Check for duplicate events\r\n    if (isDuplicateEvent(eventData)) {\r\n      console.warn('Duplicate event detected, skipping storage');\r\n      return {\r\n        success: true,\r\n        duplicate: true\r\n      };\r\n    }\r\n    \r\n    // Initialize Supabase if needed\r\n    if (!supabaseClient) {\r\n      initSupabase(config);\r\n    }\r\n    \r\n    // Add enhanced fields\r\n    const enhancedEventData = {\r\n      ...eventData,\r\n      processed_at: new Date().toISOString(),\r\n      version: '2.0' // Schema version for future migrations\r\n    };\r\n    \r\n    // Store the event\r\n    const result = await supabaseClient.from('webhook_events').insert(enhancedEventData, {\r\n      returning: true\r\n    });\r\n    \r\n    // Track metrics\r\n    await updateEventMetrics(eventData.source, eventData.event_type, config);\r\n    \r\n    return {\r\n      success: true,\r\n      id: result[0]?.id,\r\n      duplicate: false\r\n    };\r\n  } catch (error) {\r\n    console.error('Error storing event in Supabase:', error);\r\n    \r\n    // Store failed event for retry\r\n    await storeFailedEvent(eventData, error.message, config);\r\n    \r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Store multiple events in a batch with optimizations\r\n */\r\nexport async function storeBatchEvents(eventsData, config) {\r\n  if (!Array.isArray(eventsData) || eventsData.length === 0) {\r\n    return {\r\n      success: false,\r\n      error: 'No events provided for batch storage'\r\n    };\r\n  }\r\n  \r\n  try {\r\n    // Initialize Supabase if needed\r\n    if (!supabaseClient) {\r\n      initSupabase(config);\r\n    }\r\n    \r\n    const results = {\r\n      success: true,\r\n      stored: [],\r\n      duplicates: [],\r\n      failed: []\r\n    };\r\n    \r\n    // Process events in chunks\r\n    for (let i = 0; i < eventsData.length; i += BATCH_SIZE) {\r\n      const chunk = eventsData.slice(i, i + BATCH_SIZE);\r\n      const validEvents = [];\r\n      \r\n      // Validate and filter events\r\n      for (const event of chunk) {\r\n        try {\r\n          if (!event.source) throw new Error('Missing source');\r\n          if (!event.event_type) throw new Error('Missing event_type');\r\n          if (!event.payload) throw new Error('Missing payload');\r\n          \r\n          // Add timestamp if not provided\r\n          if (!event.created_at) {\r\n            event.created_at = new Date().toISOString();\r\n          }\r\n          \r\n          // Check for duplicates\r\n          if (isDuplicateEvent(event)) {\r\n            results.duplicates.push(event);\r\n            continue;\r\n          }\r\n          \r\n          // Add enhanced fields\r\n          validEvents.push({\r\n            ...event,\r\n            processed_at: new Date().toISOString(),\r\n            version: '2.0'\r\n          });\r\n        } catch (error) {\r\n          results.failed.push({\r\n            event,\r\n            error: error.message\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Store valid events\r\n      if (validEvents.length > 0) {\r\n        try {\r\n          const insertResult = await supabaseClient.from('webhook_events').insert(validEvents, {\r\n            returning: true\r\n          });\r\n          \r\n          results.stored.push(...insertResult);\r\n          \r\n          // Update metrics for each event type\r\n          const metricsUpdates = {};\r\n          for (const event of validEvents) {\r\n            const key = `${event.source}_${event.event_type}`;\r\n            metricsUpdates[key] = (metricsUpdates[key] || 0) + 1;\r\n          }\r\n          \r\n          for (const [key, count] of Object.entries(metricsUpdates)) {\r\n            const [source, eventType] = key.split('_');\r\n            await updateEventMetrics(source, eventType, config, count);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error storing batch chunk:', error);\r\n          results.failed.push(...validEvents.map(event => ({\r\n            event,\r\n            error: error.message\r\n          })));\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Store failed events for retry\r\n    if (results.failed.length > 0) {\r\n      await Promise.all(\r\n        results.failed.map(({ event, error }) => \r\n          storeFailedEvent(event, error, config)\r\n        )\r\n      );\r\n    }\r\n    \r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error in batch storage:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Store failed events for later retry\r\n */\r\nasync function storeFailedEvent(eventData, errorMessage, config) {\r\n  try {\r\n    if (!supabaseClient) {\r\n      initSupabase(config);\r\n    }\r\n    \r\n    await supabaseClient.from('webhook_events_failed').insert({\r\n      source: eventData.source,\r\n      event_type: eventData.event_type,\r\n      payload: eventData.payload,\r\n      error_message: errorMessage,\r\n      original_data: eventData,\r\n      failed_at: new Date().toISOString(),\r\n      retry_count: 0\r\n    });\r\n  } catch (error) {\r\n    console.error('Error storing failed event:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Update event metrics\r\n */\r\nasync function updateEventMetrics(source, eventType, config, count = 1) {\r\n  try {\r\n    if (!supabaseClient) {\r\n      initSupabase(config);\r\n    }\r\n    \r\n    // Use RPC function to increment metrics atomically\r\n    await supabaseClient.rpc('increment_event_metrics', {\r\n      p_source: source,\r\n      p_event_type: eventType,\r\n      p_count: count\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating metrics:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Retry failed events\r\n */\r\nexport async function retryFailedEvents(config, maxRetries = 3) {\r\n  try {\r\n    if (!supabaseClient) {\r\n      initSupabase(config);\r\n    }\r\n    \r\n    // Get failed events that haven't exceeded retry limit\r\n    const failedEvents = await supabaseClient\r\n      .from('webhook_events_failed')\r\n      .select('*', {\r\n        filters: {\r\n          retry_count: `lt.${maxRetries}`\r\n        },\r\n        limit: 100,\r\n        orderBy: 'failed_at.asc'\r\n      });\r\n    \r\n    const results = {\r\n      success: true,\r\n      retried: 0,\r\n      succeeded: 0,\r\n      failed: 0\r\n    };\r\n    \r\n    for (const failedEvent of failedEvents) {\r\n      results.retried++;\r\n      \r\n      try {\r\n        // Try to store the original event\r\n        const storeResult = await storeEvent(failedEvent.original_data, config);\r\n        \r\n        if (storeResult.success) {\r\n          // Delete from failed table on success\r\n          await supabaseClient\r\n            .from('webhook_events_failed')\r\n            .delete({\r\n              match: { id: failedEvent.id }\r\n            });\r\n          \r\n          results.succeeded++;\r\n        } else {\r\n          // Update retry count\r\n          await supabaseClient\r\n            .from('webhook_events_failed')\r\n            .update(\r\n              {\r\n                retry_count: failedEvent.retry_count + 1,\r\n                last_retry_at: new Date().toISOString(),\r\n                last_error: storeResult.error\r\n              },\r\n              {\r\n                match: { id: failedEvent.id }\r\n              }\r\n            );\r\n          \r\n          results.failed++;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error retrying failed event:', error);\r\n        results.failed++;\r\n      }\r\n    }\r\n    \r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error in retry process:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Get events with enhanced filtering and aggregation\r\n */\r\nexport async function getEvents(options = {}, config) {\r\n  try {\r\n    if (!supabaseClient) {\r\n      initSupabase(config);\r\n    }\r\n    \r\n    const limit = options.limit || 100;\r\n    const offset = options.offset || 0;\r\n    const orderBy = options.orderBy || 'created_at.desc';\r\n    \r\n    // Build filters\r\n    const filters = { ...options.filters };\r\n    \r\n    // Add date range filters if provided\r\n    if (options.startDate) {\r\n      filters.created_at = `gte.${options.startDate}`;\r\n    }\r\n    if (options.endDate) {\r\n      filters.created_at = `${filters.created_at ? filters.created_at + ',' : ''}lte.${options.endDate}`;\r\n    }\r\n    \r\n    // Add search filter if provided\r\n    if (options.search) {\r\n      filters['payload->>id'] = `ilike.%${options.search}%`;\r\n    }\r\n    \r\n    const events = await supabaseClient.from('webhook_events').select('*', {\r\n      filters,\r\n      limit,\r\n      offset,\r\n      orderBy\r\n    });\r\n    \r\n    // Get total count if requested\r\n    let totalCount = null;\r\n    if (options.includeCount) {\r\n      totalCount = await supabaseClient.from('webhook_events').count({\r\n        filters\r\n      });\r\n    }\r\n    \r\n    // Get aggregations if requested\r\n    let aggregations = null;\r\n    if (options.includeAggregations) {\r\n      aggregations = await getEventAggregations(filters, config);\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      data: events,\r\n      pagination: {\r\n        limit,\r\n        offset,\r\n        hasMore: events.length === limit,\r\n        totalCount\r\n      },\r\n      aggregations\r\n    };\r\n  } catch (error) {\r\n    console.error('Error retrieving events from Supabase:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Get event aggregations\r\n */\r\nasync function getEventAggregations(filters, config) {\r\n  try {\r\n    if (!supabaseClient) {\r\n      initSupabase(config);\r\n    }\r\n    \r\n    // Get aggregations using RPC function\r\n    const aggregations = await supabaseClient.rpc('get_event_aggregations', {\r\n      p_filters: filters\r\n    });\r\n    \r\n    return aggregations;\r\n  } catch (error) {\r\n    console.error('Error getting aggregations:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Get event statistics\r\n */\r\nexport async function getEventStatistics(options = {}, config) {\r\n  try {\r\n    if (!supabaseClient) {\r\n      initSupabase(config);\r\n    }\r\n    \r\n    const stats = await supabaseClient.rpc('get_event_statistics', {\r\n      p_start_date: options.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n      p_end_date: options.endDate || new Date().toISOString(),\r\n      p_source: options.source,\r\n      p_event_type: options.eventType\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      statistics: stats\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting statistics:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Search events with full-text search\r\n */\r\nexport async function searchEvents(query, options = {}, config) {\r\n  try {\r\n    if (!supabaseClient) {\r\n      initSupabase(config);\r\n    }\r\n    \r\n    const results = await supabaseClient.rpc('search_events', {\r\n      p_query: query,\r\n      p_limit: options.limit || 100,\r\n      p_offset: options.offset || 0,\r\n      p_source: options.source,\r\n      p_event_type: options.eventType\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      data: results,\r\n      query\r\n    };\r\n  } catch (error) {\r\n    console.error('Error searching events:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Archive old events\r\n */\r\nexport async function archiveOldEvents(daysToKeep = 90, config) {\r\n  try {\r\n    if (!supabaseClient) {\r\n      initSupabase(config);\r\n    }\r\n    \r\n    const cutoffDate = new Date(Date.now() - daysToKeep * 24 * 60 * 60 * 1000).toISOString();\r\n    \r\n    const result = await supabaseClient.rpc('archive_old_events', {\r\n      p_cutoff_date: cutoffDate\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      archived_count: result\r\n    };\r\n  } catch (error) {\r\n    console.error('Error archiving events:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Export events to CSV/JSON\r\n */\r\nexport async function exportEvents(format = 'json', options = {}, config) {\r\n  try {\r\n    if (!supabaseClient) {\r\n      initSupabase(config);\r\n    }\r\n    \r\n    // Get events with filters\r\n    const result = await getEvents({\r\n      ...options,\r\n      limit: options.limit || 1000\r\n    }, config);\r\n    \r\n    if (!result.success) {\r\n      throw new Error(result.error);\r\n    }\r\n    \r\n    if (format === 'json') {\r\n      return {\r\n        success: true,\r\n        data: JSON.stringify(result.data, null, 2),\r\n        format: 'json',\r\n        mimeType: 'application/json'\r\n      };\r\n    } else if (format === 'csv') {\r\n      // Convert to CSV\r\n      const csv = await convertToCSV(result.data);\r\n      return {\r\n        success: true,\r\n        data: csv,\r\n        format: 'csv',\r\n        mimeType: 'text/csv'\r\n      };\r\n    }\r\n    \r\n    throw new Error(`Unsupported export format: ${format}`);\r\n  } catch (error) {\r\n    console.error('Error exporting events:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Convert events to CSV format\r\n */\r\nasync function convertToCSV(events) {\r\n  if (events.length === 0) return '';\r\n  \r\n  // Get all unique keys\r\n  const keys = new Set();\r\n  events.forEach(event => {\r\n    Object.keys(event).forEach(key => {\r\n      if (key !== 'payload' && key !== 'headers' && key !== 'metadata' && key !== 'additional_context') {\r\n        keys.add(key);\r\n      }\r\n    });\r\n  });\r\n  \r\n  // Create CSV header\r\n  const header = Array.from(keys).join(',');\r\n  \r\n  // Create CSV rows\r\n  const rows = events.map(event => {\r\n    return Array.from(keys).map(key => {\r\n      const value = event[key];\r\n      if (value === null || value === undefined) return '';\r\n      if (typeof value === 'object') return JSON.stringify(value);\r\n      if (typeof value === 'string' && value.includes(',')) return `\"${value.replace(/\"/g, '\"\"')}\"`;\r\n      return value;\r\n    }).join(',');\r\n  });\r\n  \r\n  return [header, ...rows].join('\\n');\r\n}\r\n\r\n/**\r\n * Run a health check on the Supabase connection\r\n */\r\nexport async function checkSupabaseHealth(config) {\r\n  try {\r\n    if (!supabaseClient) {\r\n      initSupabase(config);\r\n    }\r\n    \r\n    // Test a simple query\r\n    const startTime = Date.now();\r\n    await supabaseClient.from('webhook_events').select('count');\r\n    const responseTime = Date.now() - startTime;\r\n    \r\n    // Check if response time is acceptable\r\n    const isHealthy = responseTime < 5000; // 5 second threshold\r\n    \r\n    return {\r\n      success: true,\r\n      status: isHealthy ? 'healthy' : 'degraded',\r\n      responseTime,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  } catch (error) {\r\n    console.error('Supabase health check failed:', error);\r\n    return {\r\n      success: false,\r\n      status: 'unhealthy',\r\n      error: error.message,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n}", "// src/utils/security.js\nexport async function verifyGitHubSignature(payload, signature, secret) {\n  try {\n    // payload is now passed as a string\n    // signature is now passed directly\n    \n    if (!signature) {\n      return false;\n    }\n    \n    // The signature is in the format \"sha256=...\"\n    const providedSignature = signature.slice(7); // Remove \"sha256=\" prefix\n    \n    // Create HMAC\n    const key = await crypto.subtle.importKey(\n      'raw',\n      new TextEncoder().encode(secret),\n      { name: 'HMAC', hash: 'SHA-256' },\n      false,\n      ['sign']\n    );\n    \n    // Sign the payload\n    const msgUint8 = new TextEncoder().encode(payload);\n    const expectedSignatureBuffer = await crypto.subtle.sign(\n      'HMAC',\n      key,\n      msgUint8\n    );\n    \n    // Convert to hex\n    const expectedSignature = Array.from(new Uint8Array(expectedSignatureBuffer))\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('');\n    \n    // Constant-time comparison\n    return timingSafeEqual(providedSignature, expectedSignature);\n  } catch (error) {\n    console.error('GitHub signature verification error:', error);\n    return false;\n  }\n}\n\nexport async function verifyLinearSignature(payload, signature, secret) {\n  try {\n    // payload is now passed as a string\n    // signature is now passed directly\n    \n    if (!signature) {\n      return false;\n    }\n    \n    // Create HMAC\n    const key = await crypto.subtle.importKey(\n      'raw',\n      new TextEncoder().encode(secret),\n      { name: 'HMAC', hash: 'SHA-256' },\n      false,\n      ['sign']\n    );\n    \n    // Sign the payload\n    const msgUint8 = new TextEncoder().encode(payload);\n    const expectedSignatureBuffer = await crypto.subtle.sign(\n      'HMAC',\n      key,\n      msgUint8\n    );\n    \n    // Convert to base64\n    const expectedSignature = btoa(\n      String.fromCharCode(...new Uint8Array(expectedSignatureBuffer))\n    );\n    \n    // Constant-time comparison\n    return timingSafeEqual(signature, expectedSignature);\n  } catch (error) {\n    console.error('Linear signature verification error:', error);\n    return false;\n  }\n}\n\nexport async function verifySlackSignature(payload, timestamp, signature, secret) {\n  try {\n    // payload is now passed as a string\n    \n    if (!signature || !timestamp) {\n      return false;\n    }\n    \n    // Check timestamp is recent (within 5 minutes)\n    const currentTime = Math.floor(Date.now() / 1000);\n    if (Math.abs(currentTime - parseInt(timestamp)) > 300) {\n      return false; // Timestamp is too old\n    }\n    \n    // Create the signature base string\n    const baseString = `v0:${timestamp}:${payload}`;\n    \n    // Create HMAC\n    const key = await crypto.subtle.importKey(\n      'raw',\n      new TextEncoder().encode(secret),\n      { name: 'HMAC', hash: 'SHA-256' },\n      false,\n      ['sign']\n    );\n    \n    // Sign the base string\n    const msgUint8 = new TextEncoder().encode(baseString);\n    const signatureBuffer = await crypto.subtle.sign(\n      'HMAC',\n      key,\n      msgUint8\n    );\n    \n    // Convert to hex with v0= prefix\n    const expectedSignature = 'v0=' + Array.from(new Uint8Array(signatureBuffer))\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('');\n    \n    // Constant-time comparison\n    return timingSafeEqual(signature, expectedSignature);\n  } catch (error) {\n    console.error('Slack signature verification error:', error);\n    return false;\n  }\n}\n\n// Constant-time string comparison to prevent timing attacks\nfunction timingSafeEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  \n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result |= a.charCodeAt(i) ^ b.charCodeAt(i);\n  }\n  \n  return result === 0;\n}", "// src/utils/metadata.js\r\n\r\n/**\r\n * Extract comprehensive metadata from GitHub payloads\r\n */\r\nexport function extractGitHubMetadata(payload, eventType) {\r\n  const metadata = {\r\n    eventType,\r\n    timestamp: new Date().toISOString(),\r\n    source: 'github'\r\n  };\r\n  \r\n  // Repository metadata\r\n  if (payload.repository) {\r\n    metadata.repository = {\r\n      id: payload.repository.id,\r\n      name: payload.repository.name,\r\n      full_name: payload.repository.full_name,\r\n      private: payload.repository.private,\r\n      owner: {\r\n        login: payload.repository.owner.login,\r\n        id: payload.repository.owner.id,\r\n        type: payload.repository.owner.type\r\n      },\r\n      html_url: payload.repository.html_url,\r\n      description: payload.repository.description,\r\n      fork: payload.repository.fork,\r\n      created_at: payload.repository.created_at,\r\n      updated_at: payload.repository.updated_at,\r\n      pushed_at: payload.repository.pushed_at,\r\n      size: payload.repository.size,\r\n      stargazers_count: payload.repository.stargazers_count,\r\n      watchers_count: payload.repository.watchers_count,\r\n      language: payload.repository.language,\r\n      has_issues: payload.repository.has_issues,\r\n      has_projects: payload.repository.has_projects,\r\n      has_downloads: payload.repository.has_downloads,\r\n      has_wiki: payload.repository.has_wiki,\r\n      has_pages: payload.repository.has_pages,\r\n      forks_count: payload.repository.forks_count,\r\n      archived: payload.repository.archived,\r\n      disabled: payload.repository.disabled,\r\n      open_issues_count: payload.repository.open_issues_count,\r\n      license: payload.repository.license?.name,\r\n      topics: payload.repository.topics,\r\n      visibility: payload.repository.visibility,\r\n      default_branch: payload.repository.default_branch\r\n    };\r\n  }\r\n  \r\n  // Organization metadata\r\n  if (payload.organization) {\r\n    metadata.organization = {\r\n      login: payload.organization.login,\r\n      id: payload.organization.id,\r\n      url: payload.organization.url,\r\n      avatar_url: payload.organization.avatar_url,\r\n      description: payload.organization.description\r\n    };\r\n  }\r\n  \r\n  // Sender metadata\r\n  if (payload.sender) {\r\n    metadata.sender = {\r\n      login: payload.sender.login,\r\n      id: payload.sender.id,\r\n      avatar_url: payload.sender.avatar_url,\r\n      type: payload.sender.type,\r\n      site_admin: payload.sender.site_admin\r\n    };\r\n  }\r\n  \r\n  // Installation metadata (for GitHub Apps)\r\n  if (payload.installation) {\r\n    metadata.installation = {\r\n      id: payload.installation.id,\r\n      account: {\r\n        login: payload.installation.account.login,\r\n        id: payload.installation.account.id,\r\n        type: payload.installation.account.type\r\n      }\r\n    };\r\n  }\r\n  \r\n  // Extract event-specific metadata\r\n  switch (eventType) {\r\n    case 'push':\r\n      metadata.push = {\r\n        ref: payload.ref,\r\n        before: payload.before,\r\n        after: payload.after,\r\n        created: payload.created,\r\n        deleted: payload.deleted,\r\n        forced: payload.forced,\r\n        base_ref: payload.base_ref,\r\n        compare: payload.compare,\r\n        commits_count: payload.commits?.length || 0,\r\n        distinct_commits_count: payload.distinct_commits?.length || 0,\r\n        head_commit_id: payload.head_commit?.id,\r\n        head_commit_message: payload.head_commit?.message,\r\n        head_commit_author: payload.head_commit?.author\r\n      };\r\n      break;\r\n      \r\n    case 'pull_request':\r\n      if (payload.pull_request) {\r\n        metadata.pull_request = {\r\n          id: payload.pull_request.id,\r\n          number: payload.pull_request.number,\r\n          state: payload.pull_request.state,\r\n          locked: payload.pull_request.locked,\r\n          title: payload.pull_request.title,\r\n          body: payload.pull_request.body,\r\n          created_at: payload.pull_request.created_at,\r\n          updated_at: payload.pull_request.updated_at,\r\n          closed_at: payload.pull_request.closed_at,\r\n          merged_at: payload.pull_request.merged_at,\r\n          merge_commit_sha: payload.pull_request.merge_commit_sha,\r\n          assignees: payload.pull_request.assignees?.map(a => a.login),\r\n          requested_reviewers: payload.pull_request.requested_reviewers?.map(r => r.login),\r\n          requested_teams: payload.pull_request.requested_teams?.map(t => t.name),\r\n          labels: payload.pull_request.labels?.map(l => l.name),\r\n          milestone: payload.pull_request.milestone?.title,\r\n          draft: payload.pull_request.draft,\r\n          commits: payload.pull_request.commits,\r\n          additions: payload.pull_request.additions,\r\n          deletions: payload.pull_request.deletions,\r\n          changed_files: payload.pull_request.changed_files,\r\n          base: {\r\n            ref: payload.pull_request.base.ref,\r\n            sha: payload.pull_request.base.sha\r\n          },\r\n          head: {\r\n            ref: payload.pull_request.head.ref,\r\n            sha: payload.pull_request.head.sha\r\n          }\r\n        };\r\n      }\r\n      break;\r\n      \r\n    case 'issues':\r\n      if (payload.issue) {\r\n        metadata.issue = {\r\n          id: payload.issue.id,\r\n          number: payload.issue.number,\r\n          state: payload.issue.state,\r\n          title: payload.issue.title,\r\n          body: payload.issue.body,\r\n          created_at: payload.issue.created_at,\r\n          updated_at: payload.issue.updated_at,\r\n          closed_at: payload.issue.closed_at,\r\n          assignees: payload.issue.assignees?.map(a => a.login),\r\n          labels: payload.issue.labels?.map(l => l.name),\r\n          milestone: payload.issue.milestone?.title,\r\n          locked: payload.issue.locked,\r\n          comments: payload.issue.comments,\r\n          author_association: payload.issue.author_association\r\n        };\r\n      }\r\n      break;\r\n      \r\n    case 'release':\r\n      if (payload.release) {\r\n        metadata.release = {\r\n          id: payload.release.id,\r\n          tag_name: payload.release.tag_name,\r\n          target_commitish: payload.release.target_commitish,\r\n          name: payload.release.name,\r\n          draft: payload.release.draft,\r\n          prerelease: payload.release.prerelease,\r\n          created_at: payload.release.created_at,\r\n          published_at: payload.release.published_at,\r\n          assets: payload.release.assets?.map(a => ({\r\n            name: a.name,\r\n            size: a.size,\r\n            download_count: a.download_count\r\n          }))\r\n        };\r\n      }\r\n      break;\r\n      \r\n    case 'workflow_run':\r\n      if (payload.workflow_run) {\r\n        metadata.workflow_run = {\r\n          id: payload.workflow_run.id,\r\n          name: payload.workflow_run.name,\r\n          head_branch: payload.workflow_run.head_branch,\r\n          head_sha: payload.workflow_run.head_sha,\r\n          status: payload.workflow_run.status,\r\n          conclusion: payload.workflow_run.conclusion,\r\n          workflow_id: payload.workflow_run.workflow_id,\r\n          run_number: payload.workflow_run.run_number,\r\n          event: payload.workflow_run.event,\r\n          created_at: payload.workflow_run.created_at,\r\n          updated_at: payload.workflow_run.updated_at,\r\n          run_attempt: payload.workflow_run.run_attempt\r\n        };\r\n      }\r\n      break;\r\n  }\r\n  \r\n  return metadata;\r\n}\r\n\r\n/**\r\n * Extract comprehensive metadata from Linear payloads\r\n */\r\nexport function extractLinearMetadata(payload) {\r\n  const metadata = {\r\n    timestamp: new Date().toISOString(),\r\n    source: 'linear',\r\n    action: payload.action,\r\n    type: payload.type,\r\n    organizationId: payload.organizationId,\r\n    webhookId: payload.webhookId,\r\n    webhookTimestamp: payload.createdAt\r\n  };\r\n  \r\n  if (payload.data) {\r\n    // Common fields\r\n    metadata.data = {\r\n      id: payload.data.id,\r\n      createdAt: payload.data.createdAt,\r\n      updatedAt: payload.data.updatedAt,\r\n      archivedAt: payload.data.archivedAt\r\n    };\r\n    \r\n    // Type-specific metadata\r\n    switch (payload.type) {\r\n      case 'Issue':\r\n        Object.assign(metadata.data, {\r\n          identifier: payload.data.identifier,\r\n          title: payload.data.title,\r\n          description: payload.data.description,\r\n          priority: payload.data.priority,\r\n          priorityLabel: payload.data.priorityLabel,\r\n          estimate: payload.data.estimate,\r\n          dueDate: payload.data.dueDate,\r\n          completedAt: payload.data.completedAt,\r\n          canceledAt: payload.data.canceledAt,\r\n          startedAt: payload.data.startedAt,\r\n          number: payload.data.number,\r\n          url: payload.data.url,\r\n          branchName: payload.data.branchName,\r\n          customerTicketCount: payload.data.customerTicketCount,\r\n          previousIdentifiers: payload.data.previousIdentifiers,\r\n          subIssueSortOrder: payload.data.subIssueSortOrder,\r\n          sortOrder: payload.data.sortOrder\r\n        });\r\n        \r\n        // Related entities\r\n        if (payload.data.state) {\r\n          metadata.data.state = {\r\n            id: payload.data.state.id,\r\n            name: payload.data.state.name,\r\n            type: payload.data.state.type,\r\n            color: payload.data.state.color\r\n          };\r\n        }\r\n        \r\n        if (payload.data.team) {\r\n          metadata.data.team = {\r\n            id: payload.data.team.id,\r\n            name: payload.data.team.name,\r\n            key: payload.data.team.key\r\n          };\r\n        }\r\n        \r\n        if (payload.data.assignee) {\r\n          metadata.data.assignee = {\r\n            id: payload.data.assignee.id,\r\n            name: payload.data.assignee.name,\r\n            email: payload.data.assignee.email\r\n          };\r\n        }\r\n        \r\n        if (payload.data.creator) {\r\n          metadata.data.creator = {\r\n            id: payload.data.creator.id,\r\n            name: payload.data.creator.name,\r\n            email: payload.data.creator.email\r\n          };\r\n        }\r\n        \r\n        if (payload.data.project) {\r\n          metadata.data.project = {\r\n            id: payload.data.project.id,\r\n            name: payload.data.project.name,\r\n            state: payload.data.project.state\r\n          };\r\n        }\r\n        \r\n        if (payload.data.cycle) {\r\n          metadata.data.cycle = {\r\n            id: payload.data.cycle.id,\r\n            name: payload.data.cycle.name,\r\n            number: payload.data.cycle.number\r\n          };\r\n        }\r\n        \r\n        if (payload.data.parent) {\r\n          metadata.data.parent = {\r\n            id: payload.data.parent.id,\r\n            identifier: payload.data.parent.identifier,\r\n            title: payload.data.parent.title\r\n          };\r\n        }\r\n        \r\n        if (payload.data.labels) {\r\n          metadata.data.labels = payload.data.labels.map(l => ({\r\n            id: l.id,\r\n            name: l.name,\r\n            color: l.color\r\n          }));\r\n        }\r\n        break;\r\n        \r\n      case 'Project':\r\n        Object.assign(metadata.data, {\r\n          name: payload.data.name,\r\n          description: payload.data.description,\r\n          icon: payload.data.icon,\r\n          color: payload.data.color,\r\n          state: payload.data.state,\r\n          startDate: payload.data.startDate,\r\n          targetDate: payload.data.targetDate,\r\n          progress: payload.data.progress,\r\n          scopeProgress: payload.data.scopeProgress,\r\n          slackNewIssue: payload.data.slackNewIssue,\r\n          slackIssueComments: payload.data.slackIssueComments,\r\n          slackIssueStatuses: payload.data.slackIssueStatuses,\r\n          url: payload.data.url\r\n        });\r\n        \r\n        if (payload.data.lead) {\r\n          metadata.data.lead = {\r\n            id: payload.data.lead.id,\r\n            name: payload.data.lead.name,\r\n            email: payload.data.lead.email\r\n          };\r\n        }\r\n        \r\n        if (payload.data.milestone) {\r\n          metadata.data.milestone = {\r\n            id: payload.data.milestone.id,\r\n            name: payload.data.milestone.name\r\n          };\r\n        }\r\n        break;\r\n        \r\n      case 'Cycle':\r\n        Object.assign(metadata.data, {\r\n          number: payload.data.number,\r\n          name: payload.data.name,\r\n          description: payload.data.description,\r\n          startsAt: payload.data.startsAt,\r\n          endsAt: payload.data.endsAt,\r\n          completedAt: payload.data.completedAt,\r\n          progress: payload.data.progress,\r\n          scopeProgress: payload.data.scopeProgress\r\n        });\r\n        \r\n        if (payload.data.team) {\r\n          metadata.data.team = {\r\n            id: payload.data.team.id,\r\n            name: payload.data.team.name,\r\n            key: payload.data.team.key\r\n          };\r\n        }\r\n        break;\r\n        \r\n      case 'User':\r\n        Object.assign(metadata.data, {\r\n          name: payload.data.name,\r\n          displayName: payload.data.displayName,\r\n          email: payload.data.email,\r\n          avatarUrl: payload.data.avatarUrl,\r\n          active: payload.data.active,\r\n          admin: payload.data.admin,\r\n          guest: payload.data.guest,\r\n          lastSeen: payload.data.lastSeen,\r\n          statusEmoji: payload.data.statusEmoji,\r\n          statusLabel: payload.data.statusLabel,\r\n          statusUntilAt: payload.data.statusUntilAt,\r\n          timezone: payload.data.timezone,\r\n          url: payload.data.url\r\n        });\r\n        break;\r\n        \r\n      case 'Comment':\r\n        Object.assign(metadata.data, {\r\n          body: payload.data.body,\r\n          edited: payload.data.editedAt ? true : false,\r\n          url: payload.data.url\r\n        });\r\n        \r\n        if (payload.data.issue) {\r\n          metadata.data.issue = {\r\n            id: payload.data.issue.id,\r\n            identifier: payload.data.issue.identifier,\r\n            title: payload.data.issue.title\r\n          };\r\n        }\r\n        \r\n        if (payload.data.user) {\r\n          metadata.data.user = {\r\n            id: payload.data.user.id,\r\n            name: payload.data.user.name,\r\n            email: payload.data.user.email\r\n          };\r\n        }\r\n        \r\n        if (payload.data.parent) {\r\n          metadata.data.parent = {\r\n            id: payload.data.parent.id\r\n          };\r\n        }\r\n        break;\r\n        \r\n      case 'Label':\r\n        Object.assign(metadata.data, {\r\n          name: payload.data.name,\r\n          description: payload.data.description,\r\n          color: payload.data.color\r\n        });\r\n        \r\n        if (payload.data.team) {\r\n          metadata.data.team = {\r\n            id: payload.data.team.id,\r\n            name: payload.data.team.name,\r\n            key: payload.data.team.key\r\n          };\r\n        }\r\n        \r\n        if (payload.data.parent) {\r\n          metadata.data.parent = {\r\n            id: payload.data.parent.id,\r\n            name: payload.data.parent.name\r\n          };\r\n        }\r\n        break;\r\n        \r\n      case 'WorkflowState':\r\n        Object.assign(metadata.data, {\r\n          name: payload.data.name,\r\n          description: payload.data.description,\r\n          color: payload.data.color,\r\n          type: payload.data.type,\r\n          position: payload.data.position\r\n        });\r\n        \r\n        if (payload.data.team) {\r\n          metadata.data.team = {\r\n            id: payload.data.team.id,\r\n            name: payload.data.team.name,\r\n            key: payload.data.team.key\r\n          };\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  \r\n  return metadata;\r\n}\r\n\r\n/**\r\n * Extract comprehensive metadata from Slack payloads\r\n */\r\nexport function extractSlackMetadata(payload) {\r\n  const metadata = {\r\n    timestamp: new Date().toISOString(),\r\n    source: 'slack'\r\n  };\r\n  \r\n  // Event API metadata\r\n  if (payload.event_id) {\r\n    metadata.event_id = payload.event_id;\r\n    metadata.event_time = payload.event_time;\r\n    metadata.event_context = payload.event_context;\r\n  }\r\n  \r\n  // Team/Workspace metadata\r\n  if (payload.team_id || payload.team) {\r\n    metadata.team = {\r\n      id: payload.team_id || payload.team?.id,\r\n      name: payload.team?.name,\r\n      domain: payload.team?.domain\r\n    };\r\n  }\r\n  \r\n  // Enterprise Grid metadata\r\n  if (payload.enterprise_id || payload.enterprise) {\r\n    metadata.enterprise = {\r\n      id: payload.enterprise_id || payload.enterprise?.id,\r\n      name: payload.enterprise?.name\r\n    };\r\n  }\r\n  \r\n  // API App metadata\r\n  if (payload.api_app_id) {\r\n    metadata.api_app_id = payload.api_app_id;\r\n  }\r\n  \r\n  // Event metadata\r\n  if (payload.event) {\r\n    metadata.event_type = payload.event.type;\r\n    metadata.event_subtype = payload.event.subtype;\r\n    \r\n    // Channel metadata from event\r\n    if (payload.event.channel || payload.event.item?.channel) {\r\n      const channelId = payload.event.channel || payload.event.item.channel;\r\n      metadata.channel = {\r\n        id: channelId,\r\n        type: determineChannelType(channelId),\r\n        name: payload.event.channel_name\r\n      };\r\n    }\r\n    \r\n    // User metadata from event\r\n    if (payload.event.user) {\r\n      metadata.user = {\r\n        id: payload.event.user,\r\n        team_id: payload.event.user_team\r\n      };\r\n    }\r\n    \r\n    // Message metadata\r\n    if (payload.event.ts) {\r\n      metadata.message = {\r\n        ts: payload.event.ts,\r\n        thread_ts: payload.event.thread_ts,\r\n        client_msg_id: payload.event.client_msg_id\r\n      };\r\n    }\r\n  }\r\n  \r\n  // Interactive component metadata\r\n  if (payload.type === 'block_actions' || payload.type === 'view_submission') {\r\n    metadata.interaction = {\r\n      type: payload.type,\r\n      trigger_id: payload.trigger_id,\r\n      response_url: payload.response_url\r\n    };\r\n    \r\n    if (payload.user) {\r\n      metadata.user = {\r\n        id: payload.user.id || payload.user.user_id,\r\n        username: payload.user.username || payload.user.name,\r\n        name: payload.user.name,\r\n        team_id: payload.user.team_id\r\n      };\r\n    }\r\n    \r\n    if (payload.channel) {\r\n      metadata.channel = {\r\n        id: payload.channel.id,\r\n        name: payload.channel.name,\r\n        type: payload.channel.type || determineChannelType(payload.channel.id)\r\n      };\r\n    }\r\n    \r\n    if (payload.message) {\r\n      metadata.message = {\r\n        ts: payload.message.ts,\r\n        thread_ts: payload.message.thread_ts,\r\n        text: payload.message.text\r\n      };\r\n    }\r\n    \r\n    if (payload.view) {\r\n      metadata.view = {\r\n        id: payload.view.id,\r\n        team_id: payload.view.team_id,\r\n        type: payload.view.type,\r\n        callback_id: payload.view.callback_id,\r\n        hash: payload.view.hash,\r\n        private_metadata: payload.view.private_metadata\r\n      };\r\n    }\r\n    \r\n    if (payload.actions) {\r\n      metadata.actions = payload.actions.map(action => ({\r\n        type: action.type,\r\n        action_id: action.action_id,\r\n        block_id: action.block_id,\r\n        action_ts: action.action_ts\r\n      }));\r\n    }\r\n  }\r\n  \r\n  // Slash command metadata\r\n  if (payload.command) {\r\n    metadata.command = {\r\n      command: payload.command,\r\n      text: payload.text,\r\n      response_url: payload.response_url,\r\n      trigger_id: payload.trigger_id\r\n    };\r\n    \r\n    metadata.user = {\r\n      id: payload.user_id,\r\n      name: payload.user_name\r\n    };\r\n    \r\n    metadata.channel = {\r\n      id: payload.channel_id,\r\n      name: payload.channel_name\r\n    };\r\n  }\r\n  \r\n  // OAuth/permissions metadata\r\n  if (payload.authorizations) {\r\n    metadata.authorizations = payload.authorizations.map(auth => ({\r\n      enterprise_id: auth.enterprise_id,\r\n      team_id: auth.team_id,\r\n      user_id: auth.user_id,\r\n      is_bot: auth.is_bot,\r\n      is_enterprise_install: auth.is_enterprise_install\r\n    }));\r\n  }\r\n  \r\n  return metadata;\r\n}\r\n\r\n// Helper function to determine channel type\r\nfunction determineChannelType(channelId) {\r\n  if (!channelId) return null;\r\n  \r\n  if (channelId.startsWith('C')) return 'public_channel';\r\n  if (channelId.startsWith('G')) return 'private_channel';\r\n  if (channelId.startsWith('D')) return 'im';\r\n  if (channelId.startsWith('M')) return 'mpim';\r\n  \r\n  return 'unknown';\r\n}", "// src/handlers/github.js\nimport { verifyGitHubSignature } from '../utils/security.js';\nimport { extractGitHubMetadata } from '../utils/metadata.js';\n\nconst GITHUB_EVENT_MAPPING = {\n  'pull_request': {\n    opened: 'pr_opened',\n    closed: 'pr_closed',\n    merged: 'pr_merged',\n    reopened: 'pr_reopened',\n    synchronize: 'pr_updated',\n    review_requested: 'pr_review_requested',\n    review_request_removed: 'pr_review_request_removed',\n    labeled: 'pr_labeled',\n    unlabeled: 'pr_unlabeled',\n    assigned: 'pr_assigned',\n    unassigned: 'pr_unassigned',\n    converted_to_draft: 'pr_converted_to_draft',\n    ready_for_review: 'pr_ready_for_review'\n  },\n  'issues': {\n    opened: 'issue_opened',\n    closed: 'issue_closed',\n    reopened: 'issue_reopened',\n    edited: 'issue_edited',\n    deleted: 'issue_deleted',\n    transferred: 'issue_transferred',\n    pinned: 'issue_pinned',\n    unpinned: 'issue_unpinned',\n    labeled: 'issue_labeled',\n    unlabeled: 'issue_unlabeled',\n    locked: 'issue_locked',\n    unlocked: 'issue_unlocked',\n    milestoned: 'issue_milestoned',\n    demilestoned: 'issue_demilestoned',\n    assigned: 'issue_assigned',\n    unassigned: 'issue_unassigned'\n  },\n  'push': 'code_pushed',\n  'release': {\n    published: 'release_published',\n    unpublished: 'release_unpublished',\n    created: 'release_created',\n    edited: 'release_edited',\n    deleted: 'release_deleted',\n    prereleased: 'release_prereleased',\n    released: 'release_released'\n  },\n  'deployment': {\n    created: 'deployment_created'\n  },\n  'deployment_status': {\n    created: 'deployment_status_updated'\n  },\n  'workflow_run': {\n    requested: 'workflow_requested',\n    in_progress: 'workflow_in_progress',\n    completed: 'workflow_completed'\n  },\n  'check_run': {\n    created: 'check_created',\n    rerequested: 'check_rerequested',\n    completed: 'check_completed',\n    requested_action: 'check_action_requested'\n  },\n  'check_suite': {\n    completed: 'checks_completed',\n    requested: 'checks_requested',\n    rerequested: 'checks_rerequested'\n  },\n  'status': 'commit_status_updated',\n  'repository': {\n    created: 'repo_created',\n    deleted: 'repo_deleted',\n    archived: 'repo_archived',\n    unarchived: 'repo_unarchived',\n    edited: 'repo_edited',\n    renamed: 'repo_renamed',\n    transferred: 'repo_transferred',\n    publicized: 'repo_made_public',\n    privatized: 'repo_made_private'\n  },\n  'create': 'ref_created',\n  'delete': 'ref_deleted',\n  'fork': 'repo_forked',\n  'star': {\n    created: 'repo_starred',\n    deleted: 'repo_unstarred'\n  },\n  'watch': {\n    started: 'repo_watched'\n  },\n  'member': {\n    added: 'member_added',\n    removed: 'member_removed',\n    edited: 'member_edited'\n  },\n  'team': {\n    created: 'team_created',\n    deleted: 'team_deleted',\n    edited: 'team_edited',\n    added_to_repository: 'team_added_to_repo',\n    removed_from_repository: 'team_removed_from_repo'\n  },\n  'organization': {\n    member_added: 'org_member_added',\n    member_removed: 'org_member_removed',\n    member_invited: 'org_member_invited'\n  },\n  'project': {\n    created: 'project_created',\n    edited: 'project_edited',\n    closed: 'project_closed',\n    reopened: 'project_reopened',\n    deleted: 'project_deleted'\n  },\n  'project_card': {\n    created: 'project_card_created',\n    edited: 'project_card_edited',\n    moved: 'project_card_moved',\n    converted: 'project_card_converted',\n    deleted: 'project_card_deleted'\n  },\n  'project_column': {\n    created: 'project_column_created',\n    edited: 'project_column_edited',\n    moved: 'project_column_moved',\n    deleted: 'project_column_deleted'\n  },\n  'milestone': {\n    created: 'milestone_created',\n    closed: 'milestone_closed',\n    opened: 'milestone_opened',\n    edited: 'milestone_edited',\n    deleted: 'milestone_deleted'\n  },\n  'package': {\n    published: 'package_published',\n    updated: 'package_updated'\n  },\n  'page_build': 'pages_built',\n  'ping': 'webhook_ping',\n  'public': 'repo_made_public',\n  'sponsorship': {\n    created: 'sponsorship_created',\n    cancelled: 'sponsorship_cancelled',\n    edited: 'sponsorship_edited',\n    tier_changed: 'sponsorship_tier_changed',\n    pending_cancellation: 'sponsorship_pending_cancellation',\n    pending_tier_change: 'sponsorship_pending_tier_change'\n  },\n  'repository_dispatch': 'custom_event_triggered',\n  'workflow_dispatch': 'workflow_manually_triggered',\n  'discussion': {\n    created: 'discussion_created',\n    edited: 'discussion_edited',\n    deleted: 'discussion_deleted',\n    transferred: 'discussion_transferred',\n    pinned: 'discussion_pinned',\n    unpinned: 'discussion_unpinned',\n    labeled: 'discussion_labeled',\n    unlabeled: 'discussion_unlabeled',\n    locked: 'discussion_locked',\n    unlocked: 'discussion_unlocked',\n    category_changed: 'discussion_category_changed',\n    answered: 'discussion_answered',\n    unanswered: 'discussion_unanswered'\n  },\n  'discussion_comment': {\n    created: 'discussion_comment_created',\n    edited: 'discussion_comment_edited',\n    deleted: 'discussion_comment_deleted'\n  },\n  'commit_comment': {\n    created: 'commit_commented'\n  },\n  'issue_comment': {\n    created: 'issue_commented',\n    edited: 'issue_comment_edited',\n    deleted: 'issue_comment_deleted'\n  },\n  'pull_request_review': {\n    submitted: 'pr_review_submitted',\n    edited: 'pr_review_edited',\n    dismissed: 'pr_review_dismissed'\n  },\n  'pull_request_review_comment': {\n    created: 'pr_review_comment_created',\n    edited: 'pr_review_comment_edited',\n    deleted: 'pr_review_comment_deleted'\n  },\n  'pull_request_review_thread': {\n    resolved: 'pr_review_thread_resolved',\n    unresolved: 'pr_review_thread_unresolved'\n  },\n  'gollum': 'wiki_page_updated',\n  'installation': {\n    created: 'app_installed',\n    deleted: 'app_uninstalled',\n    suspend: 'app_suspended',\n    unsuspend: 'app_unsuspended',\n    new_permissions_accepted: 'app_permissions_accepted'\n  },\n  'installation_repositories': {\n    added: 'app_repos_added',\n    removed: 'app_repos_removed'\n  },\n  'marketplace_purchase': {\n    purchased: 'marketplace_purchased',\n    pending_change: 'marketplace_pending_change',\n    pending_change_cancelled: 'marketplace_change_cancelled',\n    changed: 'marketplace_changed',\n    cancelled: 'marketplace_cancelled'\n  },\n  'meta': 'webhook_deleted',\n  'security_advisory': {\n    published: 'security_advisory_published',\n    updated: 'security_advisory_updated',\n    performed: 'security_advisory_performed',\n    withdrawn: 'security_advisory_withdrawn'\n  },\n  'code_scanning_alert': {\n    created: 'security_alert_created',\n    reopened: 'security_alert_reopened',\n    closed: 'security_alert_closed',\n    fixed: 'security_alert_fixed',\n    appeared_in_branch: 'security_alert_appeared',\n    closed_by_user: 'security_alert_dismissed'\n  },\n  'secret_scanning_alert': {\n    created: 'secret_detected',\n    resolved: 'secret_resolved',\n    reopened: 'secret_reopened'\n  },\n  'dependabot_alert': {\n    created: 'dependency_alert_created',\n    dismissed: 'dependency_alert_dismissed',\n    fixed: 'dependency_alert_fixed',\n    reintroduced: 'dependency_alert_reintroduced'\n  },\n  'dependency_graph': {\n    updated: 'dependencies_updated'\n  },\n  'merge_queue_entry': {\n    created: 'merge_queue_entry_added',\n    deleted: 'merge_queue_entry_removed'\n  },\n  'branch_protection_rule': {\n    created: 'branch_protection_created',\n    edited: 'branch_protection_edited',\n    deleted: 'branch_protection_deleted'\n  },\n  'repository_vulnerability_alert': {\n    create: 'vulnerability_alert_created',\n    dismiss: 'vulnerability_alert_dismissed',\n    resolve: 'vulnerability_alert_resolved'\n  }\n};\n\nexport async function handleGitHubEvent(rawBody, payload, headers, config) {\n  const eventType = headers['x-github-event'] || 'unknown';\n  const signature = headers['x-hub-signature-256'];\n  const deliveryId = headers['x-github-delivery'];\n  const hookId = headers['x-github-hook-id'];\n  const hookInstallationTargetId = headers['x-github-hook-installation-target-id'];\n  const hookInstallationTargetType = headers['x-github-hook-installation-target-type'];\n  \n  // Verify signature if secret is configured\n  if (config.githubWebhookSecret && signature) {\n    const isValid = await verifyGitHubSignature(\n      rawBody, \n      signature,\n      config.githubWebhookSecret\n    );\n    \n    if (!isValid) {\n      return {\n        isValid: false,\n        error: 'Invalid GitHub signature'\n      };\n    }\n  }\n  \n  // Extract comprehensive metadata\n  const metadata = extractGitHubMetadata(payload, eventType);\n  \n  // Extract repository and actor\n  let repository = null;\n  let repositoryId = null;\n  let organization = null;\n  let actor = null;\n  let actorId = null;\n  let actorType = null;\n  \n  if (payload.repository) {\n    repository = payload.repository.full_name;\n    repositoryId = payload.repository.id;\n    if (payload.repository.owner) {\n      organization = payload.repository.owner.login;\n    }\n  }\n  \n  if (payload.sender) {\n    actor = payload.sender.login;\n    actorId = payload.sender.id;\n    actorType = payload.sender.type;\n  } else if (payload.actor) {\n    actor = payload.actor.login;\n    actorId = payload.actor.id;\n    actorType = payload.actor.type;\n  }\n  \n  // Determine specific event type\n  let specificEventType = eventType;\n  \n  if (GITHUB_EVENT_MAPPING[eventType]) {\n    if (typeof GITHUB_EVENT_MAPPING[eventType] === 'string') {\n      specificEventType = GITHUB_EVENT_MAPPING[eventType];\n    } else if (payload.action && GITHUB_EVENT_MAPPING[eventType][payload.action]) {\n      specificEventType = GITHUB_EVENT_MAPPING[eventType][payload.action];\n    }\n  }\n  \n  // Extract additional context based on event type\n  let additionalContext = {};\n  \n  if (eventType === 'push') {\n    additionalContext = {\n      ref: payload.ref,\n      before: payload.before,\n      after: payload.after,\n      created: payload.created,\n      deleted: payload.deleted,\n      forced: payload.forced,\n      compare: payload.compare,\n      commits: payload.commits?.length || 0,\n      head_commit: payload.head_commit?.id,\n      pusher: payload.pusher?.name || payload.pusher?.email\n    };\n  } else if (eventType === 'pull_request') {\n    additionalContext = {\n      pr_number: payload.pull_request?.number,\n      pr_title: payload.pull_request?.title,\n      pr_state: payload.pull_request?.state,\n      pr_merged: payload.pull_request?.merged,\n      pr_draft: payload.pull_request?.draft,\n      pr_base: payload.pull_request?.base?.ref,\n      pr_head: payload.pull_request?.head?.ref,\n      pr_author: payload.pull_request?.user?.login,\n      pr_labels: payload.pull_request?.labels?.map(l => l.name) || [],\n      pr_assignees: payload.pull_request?.assignees?.map(a => a.login) || [],\n      pr_reviewers: payload.pull_request?.requested_reviewers?.map(r => r.login) || [],\n      pr_teams: payload.pull_request?.requested_teams?.map(t => t.name) || []\n    };\n  } else if (eventType === 'issues') {\n    additionalContext = {\n      issue_number: payload.issue?.number,\n      issue_title: payload.issue?.title,\n      issue_state: payload.issue?.state,\n      issue_labels: payload.issue?.labels?.map(l => l.name) || [],\n      issue_assignees: payload.issue?.assignees?.map(a => a.login) || [],\n      issue_author: payload.issue?.user?.login,\n      issue_milestone: payload.issue?.milestone?.title\n    };\n  } else if (eventType === 'release') {\n    additionalContext = {\n      release_tag: payload.release?.tag_name,\n      release_name: payload.release?.name,\n      release_draft: payload.release?.draft,\n      release_prerelease: payload.release?.prerelease,\n      release_author: payload.release?.author?.login,\n      release_assets: payload.release?.assets?.length || 0\n    };\n  } else if (eventType === 'workflow_run') {\n    additionalContext = {\n      workflow_id: payload.workflow_run?.workflow_id,\n      workflow_name: payload.workflow_run?.name,\n      workflow_run_id: payload.workflow_run?.id,\n      workflow_run_number: payload.workflow_run?.run_number,\n      workflow_status: payload.workflow_run?.status,\n      workflow_conclusion: payload.workflow_run?.conclusion,\n      workflow_branch: payload.workflow_run?.head_branch,\n      workflow_actor: payload.workflow_run?.actor?.login,\n      workflow_event: payload.workflow_run?.event\n    };\n  } else if (eventType === 'deployment' || eventType === 'deployment_status') {\n    additionalContext = {\n      deployment_id: payload.deployment?.id || payload.deployment_status?.deployment?.id,\n      deployment_environment: payload.deployment?.environment || payload.deployment_status?.environment,\n      deployment_ref: payload.deployment?.ref,\n      deployment_task: payload.deployment?.task,\n      deployment_description: payload.deployment?.description || payload.deployment_status?.description,\n      deployment_status: payload.deployment_status?.state,\n      deployment_creator: payload.deployment?.creator?.login || payload.deployment_status?.creator?.login\n    };\n  }\n  \n  return {\n    isValid: true,\n    eventType: specificEventType,\n    repository,\n    repositoryId,\n    organization,\n    actor,\n    actorId,\n    actorType,\n    deliveryId,\n    hookId,\n    hookInstallationTargetId,\n    hookInstallationTargetType,\n    metadata,\n    additionalContext,\n    rawEventType: eventType,\n    action: payload.action\n  };\n}", "// src/handlers/linear.js\nimport { verifyLinearSignature } from '../utils/security.js';\nimport { extractLinearMetadata } from '../utils/metadata.js';\n\nconst LINEAR_EVENT_MAPPING = {\n  'Issue': {\n    create: 'issue_created',\n    update: 'issue_updated',\n    remove: 'issue_deleted',\n    'state:update': 'issue_state_changed',\n    'assignee:update': 'issue_assignee_changed',\n    'priority:update': 'issue_priority_changed',\n    'estimate:update': 'issue_estimate_changed',\n    'label:add': 'issue_label_added',\n    'label:remove': 'issue_label_removed',\n    'project:add': 'issue_added_to_project',\n    'project:remove': 'issue_removed_from_project',\n    'cycle:add': 'issue_added_to_cycle',\n    'cycle:remove': 'issue_removed_from_cycle',\n    'parent:update': 'issue_parent_changed',\n    'subscriber:add': 'issue_subscriber_added',\n    'subscriber:remove': 'issue_subscriber_removed',\n    'dueDate:update': 'issue_due_date_changed',\n    'attachment:create': 'issue_attachment_added',\n    'attachment:remove': 'issue_attachment_removed',\n    'reaction:create': 'issue_reaction_added',\n    'reaction:remove': 'issue_reaction_removed'\n  },\n  'Comment': {\n    create: 'comment_created',\n    update: 'comment_updated',\n    remove: 'comment_deleted',\n    'reaction:create': 'comment_reaction_added',\n    'reaction:remove': 'comment_reaction_removed'\n  },\n  'Project': {\n    create: 'project_created',\n    update: 'project_updated',\n    remove: 'project_deleted',\n    'state:update': 'project_state_changed',\n    'lead:update': 'project_lead_changed',\n    'member:add': 'project_member_added',\n    'member:remove': 'project_member_removed',\n    'milestone:add': 'project_milestone_added',\n    'milestone:remove': 'project_milestone_removed',\n    'milestone:update': 'project_milestone_updated'\n  },\n  'ProjectUpdate': {\n    create: 'project_update_created',\n    update: 'project_update_edited',\n    remove: 'project_update_deleted'\n  },\n  'Cycle': {\n    create: 'cycle_created',\n    update: 'cycle_updated',\n    remove: 'cycle_deleted',\n    'state:update': 'cycle_state_changed',\n    'progress:update': 'cycle_progress_updated'\n  },\n  'User': {\n    create: 'user_created',\n    update: 'user_updated',\n    remove: 'user_removed',\n    'active:update': 'user_activation_changed',\n    'admin:update': 'user_admin_status_changed'\n  },\n  'Team': {\n    create: 'team_created',\n    update: 'team_updated',\n    remove: 'team_deleted',\n    'member:add': 'team_member_added',\n    'member:remove': 'team_member_removed',\n    'key:update': 'team_key_changed',\n    'settings:update': 'team_settings_updated'\n  },\n  'Label': {\n    create: 'label_created',\n    update: 'label_updated',\n    remove: 'label_deleted',\n    'parent:update': 'label_parent_changed'\n  },\n  'Workflow': {\n    create: 'workflow_created',\n    update: 'workflow_updated',\n    remove: 'workflow_deleted',\n    'state:add': 'workflow_state_added',\n    'state:remove': 'workflow_state_removed',\n    'state:update': 'workflow_state_updated'\n  },\n  'WorkflowState': {\n    create: 'workflow_state_created',\n    update: 'workflow_state_updated',\n    remove: 'workflow_state_deleted',\n    'position:update': 'workflow_state_position_changed'\n  },\n  'Milestone': {\n    create: 'milestone_created',\n    update: 'milestone_updated',\n    remove: 'milestone_deleted'\n  },\n  'Objective': {\n    create: 'objective_created',\n    update: 'objective_updated',\n    remove: 'objective_deleted',\n    'progress:update': 'objective_progress_updated'\n  },\n  'KeyResult': {\n    create: 'key_result_created',\n    update: 'key_result_updated',\n    remove: 'key_result_deleted',\n    'progress:update': 'key_result_progress_updated'\n  },\n  'Roadmap': {\n    create: 'roadmap_created',\n    update: 'roadmap_updated',\n    remove: 'roadmap_deleted'\n  },\n  'RoadmapItem': {\n    create: 'roadmap_item_created',\n    update: 'roadmap_item_updated',\n    remove: 'roadmap_item_deleted'\n  },\n  'Integration': {\n    create: 'integration_created',\n    update: 'integration_updated',\n    remove: 'integration_deleted',\n    'enable:update': 'integration_status_changed'\n  },\n  'Webhook': {\n    create: 'webhook_created',\n    update: 'webhook_updated',\n    remove: 'webhook_deleted',\n    'enable:update': 'webhook_status_changed'\n  },\n  'Attachment': {\n    create: 'attachment_created',\n    update: 'attachment_updated',\n    remove: 'attachment_deleted'\n  },\n  'Reaction': {\n    create: 'reaction_added',\n    remove: 'reaction_removed'\n  },\n  'Notification': {\n    create: 'notification_created',\n    update: 'notification_updated',\n    'read:update': 'notification_read_status_changed',\n    'archive:update': 'notification_archive_status_changed'\n  },\n  'Document': {\n    create: 'document_created',\n    update: 'document_updated',\n    remove: 'document_deleted'\n  },\n  'DocumentContent': {\n    update: 'document_content_updated'\n  },\n  'Favorite': {\n    create: 'favorite_added',\n    remove: 'favorite_removed'\n  },\n  'CustomView': {\n    create: 'custom_view_created',\n    update: 'custom_view_updated',\n    remove: 'custom_view_deleted'\n  },\n  'ApiKey': {\n    create: 'api_key_created',\n    remove: 'api_key_deleted'\n  },\n  'Subscription': {\n    create: 'subscription_created',\n    update: 'subscription_updated',\n    remove: 'subscription_deleted'\n  },\n  'Template': {\n    create: 'template_created',\n    update: 'template_updated',\n    remove: 'template_deleted'\n  }\n};\n\nexport async function handleLinearEvent(rawBody, payload, headers, config) {\n  const eventType = headers['x-linear-event'] || 'unknown';\n  const signature = headers['x-linear-signature'];\n  const deliveryId = headers['x-linear-delivery'];\n  const timestamp = headers['x-linear-timestamp'];\n  \n  // Verify signature if secret is configured\n  if (config.linearWebhookSecret && signature) {\n    const isValid = await verifyLinearSignature(\n      rawBody,\n      signature,\n      config.linearWebhookSecret\n    );\n    \n    if (!isValid) {\n      return {\n        isValid: false,\n        error: 'Invalid Linear signature'\n      };\n    }\n  }\n  \n  // Extract comprehensive metadata\n  const metadata = extractLinearMetadata(payload);\n  \n  // Extract organization, team, user, and other entities\n  let organization = null;\n  let organizationId = null;\n  let team = null;\n  let teamId = null;\n  let actor = null;\n  let actorId = null;\n  let actorEmail = null;\n  let targetEntity = null;\n  let targetEntityId = null;\n  let targetEntityType = null;\n  \n  // Extract organization info\n  if (payload.organizationId) {\n    organizationId = payload.organizationId;\n  }\n  \n  // Extract team info\n  if (payload.data?.team) {\n    team = payload.data.team.name || payload.data.team.key;\n    teamId = payload.data.team.id;\n  } else if (payload.teamId) {\n    teamId = payload.teamId;\n  }\n  \n  // Extract actor info\n  if (payload.data?.user) {\n    actor = payload.data.user.name || payload.data.user.email;\n    actorId = payload.data.user.id;\n    actorEmail = payload.data.user.email;\n  } else if (payload.data?.createdBy) {\n    actor = payload.data.createdBy.name || payload.data.createdBy.email;\n    actorId = payload.data.createdBy.id;\n    actorEmail = payload.data.createdBy.email;\n  } else if (payload.data?.updatedBy) {\n    actor = payload.data.updatedBy.name || payload.data.updatedBy.email;\n    actorId = payload.data.updatedBy.id;\n    actorEmail = payload.data.updatedBy.email;\n  }\n  \n  // Extract target entity info\n  if (payload.data) {\n    targetEntityId = payload.data.id;\n    targetEntityType = payload.type;\n    \n    // Try to get a meaningful name for the entity\n    if (payload.data.title) {\n      targetEntity = payload.data.title;\n    } else if (payload.data.name) {\n      targetEntity = payload.data.name;\n    } else if (payload.data.identifier) {\n      targetEntity = payload.data.identifier;\n    } else if (payload.data.key) {\n      targetEntity = payload.data.key;\n    }\n  }\n  \n  // Generate specific event type\n  let specificEventType = eventType;\n  \n  if (payload.type && LINEAR_EVENT_MAPPING[payload.type]) {\n    if (payload.action && LINEAR_EVENT_MAPPING[payload.type][payload.action]) {\n      specificEventType = LINEAR_EVENT_MAPPING[payload.type][payload.action];\n    } else if (typeof LINEAR_EVENT_MAPPING[payload.type] === 'string') {\n      specificEventType = LINEAR_EVENT_MAPPING[payload.type];\n    }\n  } else if (payload.type && payload.action) {\n    specificEventType = `${payload.type.toLowerCase()}_${payload.action}`;\n  }\n  \n  // Extract additional context based on entity type\n  let additionalContext = {};\n  \n  if (payload.type === 'Issue' && payload.data) {\n    additionalContext = {\n      issue_identifier: payload.data.identifier,\n      issue_title: payload.data.title,\n      issue_description: payload.data.description,\n      issue_priority: payload.data.priority,\n      issue_priority_label: payload.data.priorityLabel,\n      issue_state: payload.data.state?.name,\n      issue_state_type: payload.data.state?.type,\n      issue_assignee: payload.data.assignee?.name,\n      issue_assignee_id: payload.data.assignee?.id,\n      issue_creator: payload.data.creator?.name,\n      issue_creator_id: payload.data.creator?.id,\n      issue_labels: payload.data.labels?.map(l => l.name) || [],\n      issue_estimate: payload.data.estimate,\n      issue_due_date: payload.data.dueDate,\n      issue_completed_at: payload.data.completedAt,\n      issue_canceled_at: payload.data.canceledAt,\n      issue_started_at: payload.data.startedAt,\n      issue_cycle: payload.data.cycle?.name,\n      issue_cycle_id: payload.data.cycle?.id,\n      issue_project: payload.data.project?.name,\n      issue_project_id: payload.data.project?.id,\n      issue_parent_id: payload.data.parent?.id,\n      issue_parent_identifier: payload.data.parent?.identifier,\n      issue_subscriber_count: payload.data.subscribers?.length || 0,\n      issue_comment_count: payload.data.comments?.length || 0,\n      issue_attachment_count: payload.data.attachments?.length || 0,\n      issue_sub_issues_count: payload.data.children?.length || 0\n    };\n  } else if (payload.type === 'Project' && payload.data) {\n    additionalContext = {\n      project_name: payload.data.name,\n      project_description: payload.data.description,\n      project_state: payload.data.state,\n      project_lead: payload.data.lead?.name,\n      project_lead_id: payload.data.lead?.id,\n      project_start_date: payload.data.startDate,\n      project_target_date: payload.data.targetDate,\n      project_member_count: payload.data.members?.length || 0,\n      project_milestone_count: payload.data.milestones?.length || 0,\n      project_issue_count: payload.data.issues?.length || 0,\n      project_progress: payload.data.progress,\n      project_status: payload.data.status,\n      project_health: payload.data.health\n    };\n  } else if (payload.type === 'Cycle' && payload.data) {\n    additionalContext = {\n      cycle_name: payload.data.name,\n      cycle_description: payload.data.description,\n      cycle_number: payload.data.number,\n      cycle_start_date: payload.data.startDate,\n      cycle_end_date: payload.data.endDate,\n      cycle_progress: payload.data.progress,\n      cycle_issues_count: payload.data.issues?.length || 0,\n      cycle_completed_issues_count: payload.data.completedIssuesCount,\n      cycle_scope_change: payload.data.scopeChange,\n      cycle_completion_rate: payload.data.completionRate\n    };\n  } else if (payload.type === 'Comment' && payload.data) {\n    additionalContext = {\n      comment_body: payload.data.body,\n      comment_author: payload.data.user?.name,\n      comment_author_id: payload.data.user?.id,\n      comment_issue_id: payload.data.issue?.id,\n      comment_issue_identifier: payload.data.issue?.identifier,\n      comment_parent_id: payload.data.parent?.id,\n      comment_edited: payload.data.editedAt ? true : false,\n      comment_reaction_count: payload.data.reactions?.length || 0\n    };\n  } else if (payload.type === 'User' && payload.data) {\n    additionalContext = {\n      user_name: payload.data.name,\n      user_email: payload.data.email,\n      user_display_name: payload.data.displayName,\n      user_avatar_url: payload.data.avatarUrl,\n      user_active: payload.data.active,\n      user_admin: payload.data.admin,\n      user_created_at: payload.data.createdAt,\n      user_last_seen: payload.data.lastSeen,\n      user_timezone: payload.data.timezone\n    };\n  } else if (payload.type === 'WorkflowState' && payload.data) {\n    additionalContext = {\n      state_name: payload.data.name,\n      state_color: payload.data.color,\n      state_position: payload.data.position,\n      state_type: payload.data.type,\n      state_description: payload.data.description,\n      state_team_id: payload.data.team?.id\n    };\n  }\n  \n  // Extract webhook metadata\n  const webhookMetadata = {\n    url: payload.url,\n    createdAt: payload.createdAt,\n    updatedAt: payload.updatedAt\n  };\n  \n  return {\n    isValid: true,\n    eventType: specificEventType,\n    repository: team, // Using team as repository equivalent\n    repositoryId: teamId,\n    organization,\n    organizationId,\n    actor,\n    actorId,\n    actorEmail,\n    targetEntity,\n    targetEntityId,\n    targetEntityType,\n    deliveryId,\n    timestamp,\n    metadata,\n    additionalContext,\n    webhookMetadata,\n    rawEventType: eventType,\n    action: payload.action,\n    modelType: payload.type\n  };\n}", "// src/handlers/slack.js\r\nimport { verifySlackSignature } from '../utils/security.js';\r\nimport { extractSlackMetadata } from '../utils/metadata.js';\r\n\r\nconst SLACK_EVENT_MAPPING = {\r\n  // Message events\r\n  'message': 'message_sent',\r\n  'message.channels': 'channel_message',\r\n  'message.groups': 'private_channel_message',\r\n  'message.im': 'direct_message',\r\n  'message.mpim': 'group_direct_message',\r\n  'app_mention': 'app_mentioned',\r\n  'message_changed': 'message_edited',\r\n  'message_deleted': 'message_deleted',\r\n  'message_replied': 'thread_reply',\r\n  \r\n  // Channel events\r\n  'channel_created': 'channel_created',\r\n  'channel_deleted': 'channel_deleted',\r\n  'channel_archive': 'channel_archived',\r\n  'channel_unarchive': 'channel_unarchived',\r\n  'channel_rename': 'channel_renamed',\r\n  'channel_joined': 'channel_joined',\r\n  'channel_left': 'channel_left',\r\n  'channel_history_changed': 'channel_history_changed',\r\n  'channel_topic': 'channel_topic_changed',\r\n  'channel_purpose': 'channel_purpose_changed',\r\n  \r\n  // User and member events\r\n  'member_joined_channel': 'member_joined_channel',\r\n  'member_left_channel': 'member_left_channel',\r\n  'user_change': 'user_profile_changed',\r\n  'user_typing': 'user_typing',\r\n  'presence_change': 'presence_changed',\r\n  'manual_presence_change': 'manual_presence_changed',\r\n  'user_huddle_changed': 'huddle_status_changed',\r\n  'user_profile_changed': 'profile_updated',\r\n  'user_status_changed': 'status_updated',\r\n  \r\n  // Team events\r\n  'team_join': 'team_member_joined',\r\n  'team_rename': 'team_renamed',\r\n  'team_pref_change': 'team_preferences_changed',\r\n  'team_domain_change': 'team_domain_changed',\r\n  'team_profile_change': 'team_profile_changed',\r\n  'team_profile_delete': 'team_profile_deleted',\r\n  'team_profile_reorder': 'team_profile_reordered',\r\n  \r\n  // File events\r\n  'file_created': 'file_uploaded',\r\n  'file_shared': 'file_shared',\r\n  'file_unshared': 'file_unshared',\r\n  'file_public': 'file_made_public',\r\n  'file_private': 'file_made_private',\r\n  'file_change': 'file_changed',\r\n  'file_deleted': 'file_deleted',\r\n  'file_comment_added': 'file_comment_added',\r\n  'file_comment_edited': 'file_comment_edited',\r\n  'file_comment_deleted': 'file_comment_deleted',\r\n  \r\n  // Reaction events\r\n  'reaction_added': 'reaction_added',\r\n  'reaction_removed': 'reaction_removed',\r\n  \r\n  // Star events\r\n  'star_added': 'item_starred',\r\n  'star_removed': 'item_unstarred',\r\n  \r\n  // Pin events\r\n  'pin_added': 'item_pinned',\r\n  'pin_removed': 'item_unpinned',\r\n  \r\n  // App events\r\n  'app_installed': 'app_installed',\r\n  'app_requested': 'app_requested',\r\n  'app_uninstalled': 'app_uninstalled',\r\n  'app_uninstalled_team': 'app_uninstalled_from_team',\r\n  'app_home_opened': 'app_home_opened',\r\n  'app_rate_limited': 'app_rate_limited',\r\n  \r\n  // Workflow events\r\n  'workflow_step_execute': 'workflow_step_executed',\r\n  'workflow_step_completed': 'workflow_step_completed',\r\n  'workflow_step_failed': 'workflow_step_failed',\r\n  'workflow_published': 'workflow_published',\r\n  'workflow_unpublished': 'workflow_unpublished',\r\n  'workflow_step_deleted': 'workflow_step_deleted',\r\n  \r\n  // Call events\r\n  'call_rejected': 'call_rejected',\r\n  'call_started': 'call_started',\r\n  'call_ended': 'call_ended',\r\n  'call_participant_joined': 'call_participant_joined',\r\n  'call_participant_left': 'call_participant_left',\r\n  'call_participant_shared_screen': 'screen_share_started',\r\n  'call_participant_stopped_screen_share': 'screen_share_stopped',\r\n  \r\n  // Slash command and interactive events\r\n  'slash_command': 'slash_command_used',\r\n  'interactive_message': 'interactive_message_action',\r\n  'block_actions': 'block_action_triggered',\r\n  'view_submission': 'modal_submitted',\r\n  'view_closed': 'modal_closed',\r\n  'shortcut': 'shortcut_triggered',\r\n  'message_action': 'message_action_used',\r\n  'global_shortcut': 'global_shortcut_used',\r\n  'options_request': 'options_requested',\r\n  \r\n  // DND events\r\n  'dnd_updated': 'dnd_status_updated',\r\n  'dnd_updated_user': 'user_dnd_updated',\r\n  \r\n  // Emoji events\r\n  'emoji_added': 'custom_emoji_added',\r\n  'emoji_removed': 'custom_emoji_removed',\r\n  'emoji_renamed': 'custom_emoji_renamed',\r\n  \r\n  // Group events\r\n  'group_open': 'private_channel_opened',\r\n  'group_close': 'private_channel_closed',\r\n  'group_archive': 'private_channel_archived',\r\n  'group_unarchive': 'private_channel_unarchived',\r\n  'group_rename': 'private_channel_renamed',\r\n  'group_joined': 'private_channel_joined',\r\n  'group_left': 'private_channel_left',\r\n  \r\n  // IM events\r\n  'im_open': 'direct_message_opened',\r\n  'im_close': 'direct_message_closed',\r\n  'im_created': 'direct_message_created',\r\n  'im_history_changed': 'direct_message_history_changed',\r\n  \r\n  // Subteam events\r\n  'subteam_created': 'usergroup_created',\r\n  'subteam_updated': 'usergroup_updated',\r\n  'subteam_members_changed': 'usergroup_members_changed',\r\n  'subteam_self_added': 'added_to_usergroup',\r\n  'subteam_self_removed': 'removed_from_usergroup',\r\n  \r\n  // Token events\r\n  'tokens_revoked': 'tokens_revoked',\r\n  'scope_granted': 'oauth_scope_granted',\r\n  'scope_denied': 'oauth_scope_denied',\r\n  \r\n  // Link events\r\n  'link_shared': 'link_shared',\r\n  \r\n  // Grid migration events\r\n  'grid_migration_finished': 'grid_migration_completed',\r\n  'grid_migration_started': 'grid_migration_started',\r\n  \r\n  // Resources events\r\n  'resources_added': 'resources_added',\r\n  'resources_removed': 'resources_removed',\r\n  \r\n  // Bot events\r\n  'bot_added': 'bot_added',\r\n  'bot_changed': 'bot_changed',\r\n  'bot_removed': 'bot_removed',\r\n  \r\n  // Commands events\r\n  'commands_changed': 'slash_commands_changed',\r\n  \r\n  // Email events\r\n  'email_domain_changed': 'email_domain_changed',\r\n  \r\n  // Account events\r\n  'account_changed': 'account_changed',\r\n  \r\n  // Invite events\r\n  'invite_requested': 'invite_requested',\r\n  \r\n  // External org events\r\n  'shared_channel_invite_accepted': 'shared_channel_invite_accepted',\r\n  'shared_channel_invite_approved': 'shared_channel_invite_approved',\r\n  'shared_channel_invite_declined': 'shared_channel_invite_declined',\r\n  'shared_channel_invite_received': 'shared_channel_invite_received',\r\n  'shared_channel_invite_removed': 'shared_channel_invite_removed',\r\n  \r\n  // URL verification (special case)\r\n  'url_verification': 'url_verification'\r\n};\r\n\r\nexport async function handleSlackEvent(request, payload, headers, config) {\r\n  const signature = headers['x-slack-signature'];\r\n  const timestamp = headers['x-slack-request-timestamp'];\r\n  const retryNum = headers['x-slack-retry-num'];\r\n  const retryReason = headers['x-slack-retry-reason'];\r\n  const requestTimestamp = headers['x-slack-request-timestamp'];\r\n  \r\n  // Verify signature if secret is configured\r\n  if (config.slackSigningSecret && signature && timestamp) {\r\n    const isValid = await verifySlackSignature(\r\n      request,\r\n      timestamp,\r\n      signature,\r\n      config.slackSigningSecret\r\n    );\r\n    \r\n    if (!isValid) {\r\n      return {\r\n        isValid: false,\r\n        error: 'Invalid Slack signature'\r\n      };\r\n    }\r\n  }\r\n  \r\n  // Handle Slack URL verification\r\n  if (payload.type === 'url_verification') {\r\n    return {\r\n      isValid: true,\r\n      eventType: 'url_verification',\r\n      challenge: payload.challenge\r\n    };\r\n  }\r\n  \r\n  // Extract comprehensive metadata\r\n  const metadata = extractSlackMetadata(payload);\r\n  \r\n  // Extract workspace, channel, user, and other entities\r\n  let workspace = null;\r\n  let workspaceId = null;\r\n  let workspaceDomain = null;\r\n  let channel = null;\r\n  let channelId = null;\r\n  let channelType = null;\r\n  let actor = null;\r\n  let actorId = null;\r\n  let actorName = null;\r\n  let actorRealName = null;\r\n  let actorIsBot = false;\r\n  let actorIsApp = false;\r\n  let appId = null;\r\n  let botId = null;\r\n  \r\n  // Extract workspace info\r\n  if (payload.team_id) {\r\n    workspaceId = payload.team_id;\r\n    workspace = payload.team?.name || payload.team_id;\r\n    workspaceDomain = payload.team?.domain;\r\n  } else if (payload.team) {\r\n    workspaceId = payload.team.id;\r\n    workspace = payload.team.name || payload.team.domain;\r\n    workspaceDomain = payload.team.domain;\r\n  }\r\n  \r\n  // Extract channel info based on event structure\r\n  if (payload.event) {\r\n    // Event API structure\r\n    if (payload.event.channel) {\r\n      channelId = payload.event.channel;\r\n      channelType = payload.event.channel_type || determineChannelType(payload.event.channel);\r\n    } else if (payload.event.item?.channel) {\r\n      channelId = payload.event.item.channel;\r\n      channelType = determineChannelType(payload.event.item.channel);\r\n    }\r\n    \r\n    // Extract actor info from event\r\n    if (payload.event.user) {\r\n      actorId = payload.event.user;\r\n    } else if (payload.event.user_id) {\r\n      actorId = payload.event.user_id;\r\n    } else if (payload.event.bot_id) {\r\n      botId = payload.event.bot_id;\r\n      actorId = payload.event.bot_id;\r\n      actorIsBot = true;\r\n    }\r\n  } else if (payload.channel_id || payload.channel) {\r\n    // Interactive components or slash commands\r\n    channelId = payload.channel_id || payload.channel?.id;\r\n    channel = payload.channel?.name;\r\n    channelType = payload.channel?.type || determineChannelType(channelId);\r\n  }\r\n  \r\n  // Extract user info\r\n  if (payload.user_id) {\r\n    actorId = payload.user_id;\r\n    actorName = payload.user_name;\r\n  } else if (payload.user) {\r\n    actorId = payload.user.id || payload.user.user_id;\r\n    actorName = payload.user.name || payload.user.username;\r\n    actorRealName = payload.user.real_name;\r\n    if (payload.user.is_bot) {\r\n      actorIsBot = true;\r\n    }\r\n  }\r\n  \r\n  // Extract app info\r\n  if (payload.api_app_id) {\r\n    appId = payload.api_app_id;\r\n    actorIsApp = true;\r\n  }\r\n  \r\n  // Determine event type\r\n  let eventType = 'unknown';\r\n  let eventSubtype = null;\r\n  let interactionType = null;\r\n  \r\n  if (payload.event && payload.event.type) {\r\n    // Event API\r\n    eventType = payload.event.type;\r\n    eventSubtype = payload.event.subtype;\r\n  } else if (payload.type === 'event_callback' && payload.event) {\r\n    // Event API callback\r\n    eventType = payload.event.type;\r\n    eventSubtype = payload.event.subtype;\r\n  } else if (payload.type === 'block_actions') {\r\n    // Block kit interactions\r\n    eventType = 'block_actions';\r\n    interactionType = 'block_action';\r\n  } else if (payload.type === 'view_submission') {\r\n    // Modal submissions\r\n    eventType = 'view_submission';\r\n    interactionType = 'modal_submit';\r\n  } else if (payload.type === 'view_closed') {\r\n    // Modal closed\r\n    eventType = 'view_closed';\r\n    interactionType = 'modal_close';\r\n  } else if (payload.type === 'shortcut') {\r\n    // Shortcuts\r\n    eventType = 'shortcut';\r\n    interactionType = payload.callback_id;\r\n  } else if (payload.type === 'message_action') {\r\n    // Message shortcuts\r\n    eventType = 'message_action';\r\n    interactionType = payload.callback_id;\r\n  } else if (payload.type === 'slash_command') {\r\n    // Slash commands (though these usually come differently)\r\n    eventType = 'slash_command';\r\n    interactionType = payload.command;\r\n  } else if (payload.type === 'interactive_message') {\r\n    // Legacy interactive messages\r\n    eventType = 'interactive_message';\r\n    interactionType = payload.callback_id;\r\n  } else if (payload.type) {\r\n    eventType = payload.type;\r\n  }\r\n  \r\n  // Map to specific event type\r\n  let specificEventType = eventType;\r\n  if (eventSubtype) {\r\n    const combinedType = `${eventType}.${eventSubtype}`;\r\n    if (SLACK_EVENT_MAPPING[combinedType]) {\r\n      specificEventType = SLACK_EVENT_MAPPING[combinedType];\r\n    } else if (SLACK_EVENT_MAPPING[eventType]) {\r\n      specificEventType = SLACK_EVENT_MAPPING[eventType];\r\n    }\r\n  } else if (SLACK_EVENT_MAPPING[eventType]) {\r\n    specificEventType = SLACK_EVENT_MAPPING[eventType];\r\n  }\r\n  \r\n  // Extract additional context based on event type\r\n  let additionalContext = {};\r\n  \r\n  if (eventType === 'message' || eventType.startsWith('message')) {\r\n    const msg = payload.event || payload;\r\n    additionalContext = {\r\n      message_text: msg.text,\r\n      message_ts: msg.ts,\r\n      message_thread_ts: msg.thread_ts,\r\n      message_is_thread_reply: !!msg.thread_ts,\r\n      message_subtype: msg.subtype,\r\n      message_edited: msg.edited ? true : false,\r\n      message_hidden: msg.hidden,\r\n      message_deleted: msg.deleted,\r\n      message_pinned: msg.pinned,\r\n      message_reactions: msg.reactions?.map(r => ({ name: r.name, count: r.count })) || [],\r\n      message_files: msg.files?.map(f => ({ id: f.id, name: f.name, mimetype: f.mimetype })) || [],\r\n      message_attachments_count: msg.attachments?.length || 0,\r\n      message_blocks_count: msg.blocks?.length || 0,\r\n      message_bot_id: msg.bot_id,\r\n      message_app_id: msg.app_id,\r\n      message_mentions: extractMentions(msg.text || ''),\r\n      message_links: extractLinks(msg.text || '')\r\n    };\r\n  } else if (eventType === 'reaction_added' || eventType === 'reaction_removed') {\r\n    additionalContext = {\r\n      reaction_name: payload.event.reaction,\r\n      reaction_item_type: payload.event.item?.type,\r\n      reaction_item_channel: payload.event.item?.channel,\r\n      reaction_item_ts: payload.event.item?.ts,\r\n      reaction_item_file: payload.event.item?.file,\r\n      reaction_item_file_comment: payload.event.item?.file_comment\r\n    };\r\n  } else if (eventType === 'file_created' || eventType === 'file_shared' || eventType === 'file_change') {\r\n    const file = payload.event.file || payload.event;\r\n    additionalContext = {\r\n      file_id: file.id,\r\n      file_name: file.name,\r\n      file_title: file.title,\r\n      file_mimetype: file.mimetype,\r\n      file_size: file.size,\r\n      file_is_public: file.is_public,\r\n      file_is_external: file.is_external,\r\n      file_channels: file.channels || [],\r\n      file_groups: file.groups || [],\r\n      file_ims: file.ims || [],\r\n      file_comments_count: file.comments_count || 0,\r\n      file_initial_comment: file.initial_comment?.comment,\r\n      file_shares: file.shares ? Object.keys(file.shares).length : 0\r\n    };\r\n  } else if (eventType === 'channel_created' || eventType === 'channel_rename') {\r\n    const chan = payload.event.channel || payload.event;\r\n    additionalContext = {\r\n      channel_id: chan.id,\r\n      channel_name: chan.name,\r\n      channel_name_previous: chan.name_previous,\r\n      channel_created: chan.created,\r\n      channel_creator: chan.creator,\r\n      channel_is_private: chan.is_private,\r\n      channel_is_shared: chan.is_shared,\r\n      channel_is_org_shared: chan.is_org_shared,\r\n      channel_is_archived: chan.is_archived\r\n    };\r\n  } else if (eventType === 'team_join' || eventType === 'user_change') {\r\n    const user = payload.event.user || payload.event;\r\n    additionalContext = {\r\n      user_id: user.id,\r\n      user_name: user.name,\r\n      user_real_name: user.real_name,\r\n      user_display_name: user.profile?.display_name,\r\n      user_email: user.profile?.email,\r\n      user_title: user.profile?.title,\r\n      user_status_text: user.profile?.status_text,\r\n      user_status_emoji: user.profile?.status_emoji,\r\n      user_is_admin: user.is_admin,\r\n      user_is_owner: user.is_owner,\r\n      user_is_primary_owner: user.is_primary_owner,\r\n      user_is_restricted: user.is_restricted,\r\n      user_is_ultra_restricted: user.is_ultra_restricted,\r\n      user_is_bot: user.is_bot,\r\n      user_is_app_user: user.is_app_user,\r\n      user_has_2fa: user.has_2fa,\r\n      user_timezone: user.tz,\r\n      user_locale: user.locale\r\n    };\r\n  } else if (eventType === 'app_mention') {\r\n    additionalContext = {\r\n      mention_text: payload.event.text,\r\n      mention_ts: payload.event.ts,\r\n      mention_thread_ts: payload.event.thread_ts,\r\n      mention_is_thread_reply: !!payload.event.thread_ts,\r\n      mention_channel: payload.event.channel,\r\n      mention_team: payload.event.team\r\n    };\r\n  } else if (eventType === 'block_actions' && payload.actions) {\r\n    additionalContext = {\r\n      action_count: payload.actions.length,\r\n      actions: payload.actions.map(action => ({\r\n        action_id: action.action_id,\r\n        block_id: action.block_id,\r\n        type: action.type,\r\n        value: action.value || action.selected_option?.value || action.selected_date || action.selected_time,\r\n        action_ts: action.action_ts\r\n      })),\r\n      response_url: payload.response_url,\r\n      trigger_id: payload.trigger_id,\r\n      container_type: payload.container?.type,\r\n      container_message_ts: payload.container?.message_ts,\r\n      view_id: payload.view?.id,\r\n      view_callback_id: payload.view?.callback_id\r\n    };\r\n  } else if (eventType === 'view_submission' && payload.view) {\r\n    additionalContext = {\r\n      view_id: payload.view.id,\r\n      view_callback_id: payload.view.callback_id,\r\n      view_type: payload.view.type,\r\n      view_private_metadata: payload.view.private_metadata,\r\n      view_state_values: Object.keys(payload.view.state?.values || {}),\r\n      response_urls: payload.response_urls?.length || 0,\r\n      trigger_id: payload.trigger_id\r\n    };\r\n  } else if (eventType === 'slash_command') {\r\n    additionalContext = {\r\n      command: payload.command,\r\n      command_text: payload.text,\r\n      response_url: payload.response_url,\r\n      trigger_id: payload.trigger_id\r\n    };\r\n  }\r\n  \r\n  // Handle retry information\r\n  if (retryNum) {\r\n    additionalContext.retry_number = parseInt(retryNum);\r\n    additionalContext.retry_reason = retryReason;\r\n  }\r\n  \r\n  // Extract enterprise grid information if present\r\n  let enterpriseId = null;\r\n  let enterpriseName = null;\r\n  if (payload.enterprise || payload.enterprise_id) {\r\n    enterpriseId = payload.enterprise_id || payload.enterprise?.id;\r\n    enterpriseName = payload.enterprise?.name;\r\n  }\r\n  \r\n  return {\r\n    isValid: true,\r\n    eventType: specificEventType,\r\n    repository: workspace, // Using workspace as repository equivalent\r\n    repositoryId: workspaceId,\r\n    channel,\r\n    channelId,\r\n    channelType,\r\n    actor: actorName || actorId,\r\n    actorId,\r\n    actorName,\r\n    actorRealName,\r\n    actorIsBot,\r\n    actorIsApp,\r\n    appId,\r\n    botId,\r\n    enterpriseId,\r\n    enterpriseName,\r\n    workspaceDomain,\r\n    timestamp: requestTimestamp,\r\n    metadata,\r\n    additionalContext,\r\n    rawEventType: eventType,\r\n    eventSubtype,\r\n    interactionType,\r\n    eventId: payload.event_id,\r\n    eventTime: payload.event_time\r\n  };\r\n}\r\n\r\n// Helper function to determine channel type from ID\r\nfunction determineChannelType(channelId) {\r\n  if (!channelId) return null;\r\n  \r\n  if (channelId.startsWith('C')) return 'public_channel';\r\n  if (channelId.startsWith('G')) return 'private_channel';\r\n  if (channelId.startsWith('D')) return 'im';\r\n  if (channelId.startsWith('M')) return 'mpim';\r\n  \r\n  return 'unknown';\r\n}\r\n\r\n// Helper function to extract mentions from text\r\nfunction extractMentions(text) {\r\n  const mentions = [];\r\n  const userMentionRegex = /<@([UW][A-Z0-9]+)(\\|([^>]+))?>/g;\r\n  const channelMentionRegex = /<#([CG][A-Z0-9]+)(\\|([^>]+))?>/g;\r\n  const specialMentionRegex = /<!([^>]+)(\\|([^>]+))?>/g;\r\n  \r\n  let match;\r\n  \r\n  // Extract user mentions\r\n  while ((match = userMentionRegex.exec(text)) !== null) {\r\n    mentions.push({\r\n      type: 'user',\r\n      id: match[1],\r\n      name: match[3] || null\r\n    });\r\n  }\r\n  \r\n  // Extract channel mentions\r\n  while ((match = channelMentionRegex.exec(text)) !== null) {\r\n    mentions.push({\r\n      type: 'channel',\r\n      id: match[1],\r\n      name: match[3] || null\r\n    });\r\n  }\r\n  \r\n  // Extract special mentions\r\n  while ((match = specialMentionRegex.exec(text)) !== null) {\r\n    mentions.push({\r\n      type: 'special',\r\n      name: match[1],\r\n      label: match[3] || null\r\n    });\r\n  }\r\n  \r\n  return mentions;\r\n}\r\n\r\n// Helper function to extract links from text\r\nfunction extractLinks(text) {\r\n  const links = [];\r\n  const linkRegex = /<(https?:\\/\\/[^|>]+)(\\|([^>]+))?>/g;\r\n  \r\n  let match;\r\n  while ((match = linkRegex.exec(text)) !== null) {\r\n    links.push({\r\n      url: match[1],\r\n      label: match[3] || null\r\n    });\r\n  }\r\n  \r\n  return links;\r\n}", "// src/worker.js\r\nimport { Router } from 'itty-router';\r\nimport { getConfig, validateConfig } from './config.js';\r\nimport { initSupabase, storeEvent, storeBatchEvents } from './utils/supabase.js';\r\nimport { handleGitHubEvent } from './handlers/github.js';\r\nimport { handleLinearEvent } from './handlers/linear.js';\r\nimport { handleSlackEvent } from './handlers/slack.js';\r\n\r\n// Create router instance\r\nconst router = Router();\r\n\r\n// Batch queue for events\r\nconst eventQueue = [];\r\nlet batchTimer = null;\r\n\r\n// Initialize configuration\r\nlet config;\r\nlet isInitialized = false;\r\n\r\nasync function initialize(env) {\r\n  if (!isInitialized) {\r\n    config = getConfig(env);\r\n    validateConfig(config);\r\n    initSupabase(config);\r\n    isInitialized = true;\r\n  }\r\n  return config;\r\n}\r\n\r\n// Health check endpoint\r\nrouter.get('/health', async (request, env) => {\r\n  try {\r\n    await initialize(env);\r\n    \r\n    return new Response(JSON.stringify({\r\n      status: 'healthy',\r\n      timestamp: new Date().toISOString(),\r\n      version: '2.0',\r\n      worker: config.workerId,\r\n      environment: config.workerEnvironment\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    return new Response(JSON.stringify({\r\n      status: 'unhealthy',\r\n      error: error.message,\r\n      timestamp: new Date().toISOString()\r\n    }), {\r\n      status: 503,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n});\r\n\r\n// Metrics endpoint\r\nrouter.get('/metrics', async (request, env) => {\r\n  try {\r\n    await initialize(env);\r\n    \r\n    // Get metrics from queue\r\n    const metrics = {\r\n      queue_size: eventQueue.length,\r\n      processed_total: 0, // Would need to track this\r\n      failed_total: 0, // Would need to track this\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    return new Response(JSON.stringify({ metrics }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    return new Response(JSON.stringify({ error: error.message }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n});\r\n\r\n// GitHub webhook endpoint\r\nrouter.post('/webhook/github', async (request, env) => {\r\n  try {\r\n    await initialize(env);\r\n    \r\n    const payload = await request.json();\r\n    const headers = Object.fromEntries(request.headers);\r\n    \r\n    const result = await handleGitHubEvent(request.clone(), payload, headers, config);\r\n    \r\n    if (!result.isValid) {\r\n      return new Response(JSON.stringify({ error: result.error }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Process event\r\n    await processEvent('github', result, env);\r\n    \r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      event: result.eventType \r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('GitHub webhook error:', error);\r\n    return new Response(JSON.stringify({ error: error.message }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n});\r\n\r\n// Linear webhook endpoint\r\nrouter.post('/webhook/linear', async (request, env) => {\r\n  try {\r\n    await initialize(env);\r\n    \r\n    const payload = await request.json();\r\n    const headers = Object.fromEntries(request.headers);\r\n    \r\n    const result = await handleLinearEvent(request.clone(), payload, headers, config);\r\n    \r\n    if (!result.isValid) {\r\n      return new Response(JSON.stringify({ error: result.error }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Process event\r\n    await processEvent('linear', result, env);\r\n    \r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      event: result.eventType \r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Linear webhook error:', error);\r\n    return new Response(JSON.stringify({ error: error.message }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n});\r\n\r\n// Slack webhook endpoint\r\nrouter.post('/webhook/slack', async (request, env) => {\r\n  try {\r\n    await initialize(env);\r\n    \r\n    const payload = await request.json();\r\n    const headers = Object.fromEntries(request.headers);\r\n    \r\n    const result = await handleSlackEvent(request.clone(), payload, headers, config);\r\n    \r\n    if (!result.isValid) {\r\n      return new Response(JSON.stringify({ error: result.error }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Handle Slack URL verification\r\n    if (result.eventType === 'url_verification') {\r\n      return new Response(result.challenge, {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'text/plain' }\r\n      });\r\n    }\r\n    \r\n    // Process event\r\n    await processEvent('slack', result, env);\r\n    \r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      event: result.eventType \r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Slack webhook error:', error);\r\n    return new Response(JSON.stringify({ error: error.message }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n});\r\n\r\n// Process and queue events\r\nasync function processEvent(source, eventData, env) {\r\n  const event = {\r\n    source,\r\n    event_type: eventData.eventType,\r\n    payload: eventData,\r\n    repository: eventData.repository,\r\n    repository_id: eventData.repositoryId,\r\n    organization: eventData.organization,\r\n    organization_id: eventData.organizationId,\r\n    actor: eventData.actor,\r\n    actor_id: eventData.actorId,\r\n    actor_type: eventData.actorType,\r\n    actor_email: eventData.actorEmail,\r\n    channel: eventData.channel,\r\n    channel_id: eventData.channelId,\r\n    channel_type: eventData.channelType,\r\n    target_entity: eventData.targetEntity,\r\n    target_entity_id: eventData.targetEntityId,\r\n    target_entity_type: eventData.targetEntityType,\r\n    headers: eventData.headers,\r\n    metadata: eventData.metadata,\r\n    additional_context: eventData.additionalContext,\r\n    raw_event_type: eventData.rawEventType,\r\n    action: eventData.action,\r\n    delivery_id: eventData.deliveryId,\r\n    webhook_id: eventData.webhookId,\r\n    timestamp: eventData.timestamp,\r\n    created_at: new Date().toISOString()\r\n  };\r\n  \r\n  if (config.enableBatching) {\r\n    // Add to queue\r\n    eventQueue.push(event);\r\n    \r\n    // Process batch if queue is full\r\n    if (eventQueue.length >= config.batchSize) {\r\n      await processBatch(env);\r\n    } else {\r\n      // Set timer for batch processing\r\n      if (!batchTimer) {\r\n        batchTimer = setTimeout(async () => {\r\n          await processBatch(env);\r\n        }, config.batchInterval);\r\n      }\r\n    }\r\n  } else {\r\n    // Process immediately\r\n    await storeEvent(event, config);\r\n  }\r\n}\r\n\r\n// Process batch of events\r\nasync function processBatch(env) {\r\n  if (eventQueue.length === 0) return;\r\n  \r\n  const events = [...eventQueue];\r\n  eventQueue.length = 0; // Clear queue\r\n  \r\n  if (batchTimer) {\r\n    clearTimeout(batchTimer);\r\n    batchTimer = null;\r\n  }\r\n  \r\n  try {\r\n    await storeBatchEvents(events, config);\r\n  } catch (error) {\r\n    console.error('Batch processing error:', error);\r\n    // Add back to queue for retry\r\n    eventQueue.unshift(...events);\r\n  }\r\n}\r\n\r\n// Default 404 handler\r\nrouter.all('*', () => new Response('Not Found', { status: 404 }));\r\n\r\n// Export worker\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    try {\r\n      return await router.handle(request, env, ctx);\r\n    } catch (error) {\r\n      console.error('Worker error:', error);\r\n      return new Response('Internal Server Error', { status: 500 });\r\n    }\r\n  },\r\n  \r\n  async scheduled(event, env, ctx) {\r\n    await initialize(env);\r\n    \r\n    // Process any remaining events in queue\r\n    if (eventQueue.length > 0) {\r\n      ctx.waitUntil(processBatch(env));\r\n    }\r\n    \r\n    // Add any scheduled tasks here\r\n    console.log('Scheduled event triggered:', event.cron);\r\n  }\r\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\L\\\\Desktop\\\\Event\\\\src\\\\worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\L\\\\Desktop\\\\Event\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\L\\\\Desktop\\\\Event\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\L\\\\Desktop\\\\Event\\\\src\\\\worker.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\L\\\\Desktop\\\\Event\\\\.wrangler\\\\tmp\\\\bundle-tIS6h9\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\L\\\\Desktop\\\\Event\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\L\\\\Desktop\\\\Event\\\\.wrangler\\\\tmp\\\\bundle-tIS6h9\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\L\\\\Desktop\\\\Event\\\\.wrangler\\\\tmp\\\\bundle-tIS6h9\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["Router", "base", "routes", "other", "__proto__", "Proxy", "get", "target", "prop", "receiver", "path", "fetch", "route", "handlers", "push", "toUpperCase", "RegExp", "replace", "async", "request", "args", "response", "match", "url", "URL", "query", "k", "v", "searchParams", "concat", "method", "regex", "pathname", "params", "groups", "handler", "proxy", "createResponse", "format", "transform", "body", "headers", "rest", "constructor", "name", "Response", "entries", "Object", "fromEntries", "json", "JSON", "stringify", "text", "createResponse", "String", "html", "jpeg", "png", "webp", "config", "config", "config", "i", "i", "l", "config", "l", "config", "l", "config", "determineChannelType", "e", "e"]
}
